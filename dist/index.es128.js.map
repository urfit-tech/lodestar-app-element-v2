{"version":3,"file":"index.es128.js","sources":["../node_modules/axios/lib/adapters/fetch.js"],"sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    const _request = new Request(platform.origin, {\n      method: 'POST',\n      body,\n    });\n    return (await _request.arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n  let request;\n\n  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n  });\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    // Cloudflare Workers throws when credentials are defined\n    // see https://github.com/cloudflare/workerd/issues/902\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: isCredentialsSupported ? withCredentials : undefined\n    });\n\n    let response = await fetch(request);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && unsubscribe && unsubscribe();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    unsubscribe && unsubscribe();\n\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n"],"names":["isFetchSupported","isReadableStreamSupported","encodeText","encoder","str","test","fn","args","supportsRequestStream","duplexAccessed","hasContentType","platform","DEFAULT_CHUNK_SIZE","supportsResponseStream","utils","resolvers","res","type","_","config","AxiosError","getBodyLength","body","resolveBodyLength","headers","length","fetchAdapter","url","method","data","signal","cancelToken","timeout","onDownloadProgress","onUploadProgress","responseType","withCredentials","fetchOptions","resolveConfig","composedSignal","composeSignals","request","unsubscribe","requestContentLength","_request","contentTypeHeader","onProgress","flush","progressEventDecorator","progressEventReducer","asyncDecorator","trackStream","isCredentialsSupported","response","isStreamResponse","options","prop","responseContentLength","responseData","resolve","reject","settle","AxiosHeaders","err"],"mappings":"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","x_google_ignoreList":[0]}