{"version":3,"file":"index.cjs83.js","sources":["../node_modules/ramda/es/mergeWithKey.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport _has from \"./internal/_has.js\";\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nvar mergeWithKey = /*#__PURE__*/_curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n  l = l || {};\n  r = r || {};\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n  for (k in r) {\n    if (_has(k, r) && !_has(k, result)) {\n      result[k] = r[k];\n    }\n  }\n  return result;\n});\nexport default mergeWithKey;"],"names":["mergeWithKey","_curry3","fn","l","r","result","k","_has"],"mappings":"8KA4BG,IAACA,EAA4BC,EAAO,QAAC,SAAsBC,EAAIC,EAAGC,EAAG,CACtE,IAAIC,EAAS,CAAE,EACXC,EACJH,EAAIA,GAAK,CAAE,EACXC,EAAIA,GAAK,CAAE,EACX,IAAKE,KAAKH,EACJI,EAAI,QAACD,EAAGH,CAAC,IACXE,EAAOC,CAAC,EAAIC,EAAAA,QAAKD,EAAGF,CAAC,EAAIF,EAAGI,EAAGH,EAAEG,CAAC,EAAGF,EAAEE,CAAC,CAAC,EAAIH,EAAEG,CAAC,GAGpD,IAAKA,KAAKF,EACJG,EAAAA,QAAKD,EAAGF,CAAC,GAAK,CAACG,UAAKD,EAAGD,CAAM,IAC/BA,EAAOC,CAAC,EAAIF,EAAEE,CAAC,GAGnB,OAAOD,CACT,CAAC","x_google_ignoreList":[0]}