{"version":3,"file":"index.es30.js","sources":["../../node_modules/@apollo/client/link/error/index.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nexport function onError(errorHandler) {\n    return new ApolloLink(function (operation, forward) {\n        return new Observable(function (observer) {\n            var sub;\n            var retriedSub;\n            var retriedResult;\n            try {\n                sub = forward(operation).subscribe({\n                    next: function (result) {\n                        if (result.errors) {\n                            retriedResult = errorHandler({\n                                graphQLErrors: result.errors,\n                                response: result,\n                                operation: operation,\n                                forward: forward,\n                            });\n                            if (retriedResult) {\n                                retriedSub = retriedResult.subscribe({\n                                    next: observer.next.bind(observer),\n                                    error: observer.error.bind(observer),\n                                    complete: observer.complete.bind(observer),\n                                });\n                                return;\n                            }\n                        }\n                        observer.next(result);\n                    },\n                    error: function (networkError) {\n                        retriedResult = errorHandler({\n                            operation: operation,\n                            networkError: networkError,\n                            //Network errors can return GraphQL errors on for example a 403\n                            graphQLErrors: (networkError &&\n                                networkError.result &&\n                                networkError.result.errors) ||\n                                void 0,\n                            forward: forward,\n                        });\n                        if (retriedResult) {\n                            retriedSub = retriedResult.subscribe({\n                                next: observer.next.bind(observer),\n                                error: observer.error.bind(observer),\n                                complete: observer.complete.bind(observer),\n                            });\n                            return;\n                        }\n                        observer.error(networkError);\n                    },\n                    complete: function () {\n                        // disable the previous sub from calling complete on observable\n                        // if retry is in flight.\n                        if (!retriedResult) {\n                            observer.complete.bind(observer)();\n                        }\n                    },\n                });\n            }\n            catch (e) {\n                errorHandler({ networkError: e, operation: operation, forward: forward });\n                observer.error(e);\n            }\n            return function () {\n                if (sub)\n                    sub.unsubscribe();\n                if (retriedSub)\n                    sub.unsubscribe();\n            };\n        });\n    });\n}\nvar ErrorLink = /** @class */ (function (_super) {\n    __extends(ErrorLink, _super);\n    function ErrorLink(errorHandler) {\n        var _this = _super.call(this) || this;\n        _this.link = onError(errorHandler);\n        return _this;\n    }\n    ErrorLink.prototype.request = function (operation, forward) {\n        return this.link.request(operation, forward);\n    };\n    return ErrorLink;\n}(ApolloLink));\nexport { ErrorLink };\n//# sourceMappingURL=index.js.map"],"names":["onError","errorHandler","ApolloLink","operation","forward","Observable","observer","sub","retriedSub","retriedResult","result","networkError","e","_super","__extends","ErrorLink","_this"],"mappings":";;;;AAGO,SAASA,EAAQC,GAAc;AAClC,SAAO,IAAIC,EAAW,SAAUC,GAAWC,GAAS;AAChD,WAAO,IAAIC,EAAW,SAAUC,GAAU;AACtC,UAAIC,GACAC,GACAC;AACJ,UAAI;AACA,QAAAF,IAAMH,EAAQD,CAAS,EAAE,UAAU;AAAA,UAC/B,MAAM,SAAUO,GAAQ;AACpB,gBAAIA,EAAO,WACPD,IAAgBR,EAAa;AAAA,cACzB,eAAeS,EAAO;AAAA,cACtB,UAAUA;AAAA,cACV,WAAWP;AAAA,cACX,SAASC;AAAA,YACzC,CAA6B,GACGK,IAAe;AACf,cAAAD,IAAaC,EAAc,UAAU;AAAA,gBACjC,MAAMH,EAAS,KAAK,KAAKA,CAAQ;AAAA,gBACjC,OAAOA,EAAS,MAAM,KAAKA,CAAQ;AAAA,gBACnC,UAAUA,EAAS,SAAS,KAAKA,CAAQ;AAAA,cAC7E,CAAiC;AACD;AAAA,YAChC;AAEwB,YAAAA,EAAS,KAAKI,CAAM;AAAA,UACvB;AAAA,UACD,OAAO,SAAUC,GAAc;AAW3B,gBAVAF,IAAgBR,EAAa;AAAA,cACzB,WAAWE;AAAA,cACX,cAAcQ;AAAA;AAAA,cAEd,eAAgBA,KACZA,EAAa,UACbA,EAAa,OAAO,UACpB;AAAA,cACJ,SAASP;AAAA,YACrC,CAAyB,GACGK,GAAe;AACf,cAAAD,IAAaC,EAAc,UAAU;AAAA,gBACjC,MAAMH,EAAS,KAAK,KAAKA,CAAQ;AAAA,gBACjC,OAAOA,EAAS,MAAM,KAAKA,CAAQ;AAAA,gBACnC,UAAUA,EAAS,SAAS,KAAKA,CAAQ;AAAA,cACzE,CAA6B;AACD;AAAA,YAC5B;AACwB,YAAAA,EAAS,MAAMK,CAAY;AAAA,UAC9B;AAAA,UACD,UAAU,WAAY;AAGlB,YAAKF,KACDH,EAAS,SAAS,KAAKA,CAAQ,EAAG;AAAA,UAEzC;AAAA,QACrB,CAAiB;AAAA,MACjB,SACmBM,GAAG;AACN,QAAAX,EAAa,EAAE,cAAcW,GAAG,WAAWT,GAAW,SAASC,GAAS,GACxEE,EAAS,MAAMM,CAAC;AAAA,MAChC;AACY,aAAO,WAAY;AACf,QAAIL,KACAA,EAAI,YAAa,GACjBC,KACAD,EAAI,YAAa;AAAA,MACxB;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;AAAA,CAC+B,SAAUM,GAAQ;AAC7C,EAAAC,EAAUC,GAAWF,CAAM;AAC3B,WAASE,EAAUd,GAAc;AAC7B,QAAIe,IAAQH,EAAO,KAAK,IAAI,KAAK;AACjC,WAAAG,EAAM,OAAOhB,EAAQC,CAAY,GAC1Be;AAAA,EACf;AACI,SAAAD,EAAU,UAAU,UAAU,SAAUZ,GAAWC,GAAS;AACxD,WAAO,KAAK,KAAK,QAAQD,GAAWC,CAAO;AAAA,EAC9C,GACMW;AACX,GAAEb,CAAU;","x_google_ignoreList":[0]}