{"version":3,"file":"index.es6.js","sources":["../src/contexts/AuthContext.tsx"],"sourcesContent":["import Axios, { AxiosError } from 'axios'\nimport jwt from 'jsonwebtoken'\nimport parsePhoneNumber from 'libphonenumber-js'\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport ReactGA from 'react-ga'\nimport { getBackendServerError } from '../helpers'\nimport { AuthTokenPayload, fetchCurrentGeolocation, getFingerPrintId, parsePayload } from '../hooks/util'\nimport { Permission } from '../types/app'\nimport { Member, UserRole } from '../types/data'\nimport { LodestarWindow } from '../types/lodestar.window'\ndeclare let window: LodestarWindow\n\ntype ProviderType = 'facebook' | 'google' | 'line' | 'parenting' | 'commonhealth' | 'cw'\n\ntype AuthProps = {\n  isAuthenticating: boolean\n  isAuthenticated: boolean\n  currentUserRole: UserRole\n  currentMemberId: string | null\n  authToken: string | null\n  isFinishedSignUpProperty: boolean\n  updateAuthToken?: (authToken: string | null) => void\n  currentMember: Pick<Member, 'id' | 'name' | 'username' | 'email' | 'pictureUrl' | 'role' | 'options'> | null\n  permissions: { [key in Permission]?: boolean }\n  refreshToken?: () => Promise<void>\n  register?: (data: {\n    appId?: string\n    username: string\n    email: string\n    password: string\n    withoutLogin?: boolean\n    isBusiness?: boolean\n  }) => Promise<any>\n  login?: (data: { account: string; password: string; accountLinkToken?: string }) => Promise<{ code: string }>\n  socialLogin?: (data: {\n    provider: ProviderType\n    providerToken: any\n    accountLinkToken?: string\n    isForceLogin?: boolean\n  }) => Promise<void>\n  switchMember?: (data: { memberId: string }) => Promise<void>\n  logout?: () => Promise<void>\n  sendSmsCode?: (data: { phoneNumber: string }) => Promise<void>\n  verifySmsCode?: (data: { phoneNumber: string; code: string }) => Promise<void>\n  forceLogin?: (data: { account: string; password: string; accountLinkToken?: string }) => Promise<void>\n}\n\nconst defaultAuthContext: AuthProps = {\n  isAuthenticating: (window as any).AUTH_TOKEN ? false : true,\n  isAuthenticated: false,\n  currentUserRole: 'anonymous',\n  currentMemberId: null,\n  authToken: null,\n  currentMember: null,\n  permissions: {},\n  isFinishedSignUpProperty: true,\n}\n\nconst initLodestarWindow = () => {\n  if (typeof window !== 'undefined') {\n    window.lodestar = window.lodestar || {}\n  }\n}\n\nconst AuthContext = createContext<AuthProps>(defaultAuthContext)\nexport const useAuth = () => useContext(AuthContext)\n\nexport const AuthProvider: React.FC<React.PropsWithChildren<{ appId: string }>> = ({ appId, children }) => {\n  const [isAuthenticating, setIsAuthenticating] = useState(defaultAuthContext.isAuthenticating)\n  const [authToken, setAuthToken] = useState<string | null>((window as any).AUTH_TOKEN || null)\n  const payload = useMemo(() => (authToken ? parsePayload(authToken) : null), [authToken])\n\n  useEffect(() => {\n    if (payload) {\n      try {\n        const phoneNumber = payload?.phoneNumber ? parsePhoneNumber(payload.phoneNumber, 'TW') : null\n        const _window = window as any\n        _window.insider_object = {\n          user: {\n            gdpr_optin: true,\n            sms_optin: true,\n            email: payload.email,\n            phone_number: phoneNumber?.isValid() ? phoneNumber.number : payload.phoneNumber,\n            email_optin: true,\n          },\n        }\n        ReactGA.set({ userId: payload.sub })\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error(error)\n        }\n      }\n    }\n  }, [payload, window])\n\n  const refreshToken = useCallback(async () => {\n    const fingerPrintId = await getFingerPrintId()\n    const { ip, country, countryCode } = await fetchCurrentGeolocation()\n    const {\n      data: { code, result },\n    } = await Axios.post(\n      `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/refresh-token`,\n      { appId, fingerPrintId, geoLocation: { ip, country, countryCode } },\n      {\n        method: 'POST',\n        withCredentials: true,\n      },\n    )\n    if (code === 'SUCCESS') {\n      setAuthToken(result.authToken)\n    } else if (code === 'E_NO_DEVICE') {\n      setAuthToken(null)\n      alert('您已被登出，目前有其他裝置登入這組帳號')\n    } else {\n      setAuthToken(null)\n    }\n    setIsAuthenticating(false)\n  }, [appId])\n\n  const currentMember = payload && {\n    id: payload.sub,\n    name: payload.name,\n    username: payload.username,\n    email: payload.email,\n    pictureUrl: payload.pictureUrl || null,\n    role: payload.role as UserRole,\n    options: payload.options || {},\n  }\n\n  initLodestarWindow()\n  if (typeof window !== 'undefined') {\n    window.lodestar.getCurrentMember = () => currentMember\n    window.lodestar.getDataLayerByEvent = (event: string) =>\n      (window as any).dataLayer.find((d: any) => d.event === event)\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticating,\n        isAuthenticated: Boolean(authToken),\n        currentUserRole: (payload?.role as UserRole) || 'anonymous',\n        currentMemberId: payload?.sub || null,\n        authToken,\n        updateAuthToken: authToken => setAuthToken(authToken),\n        isFinishedSignUpProperty: !!payload?.isFinishedSignUpProperty,\n        currentMember,\n        permissions:\n          payload?.permissions?.reduce((accumulator: { [key: string]: boolean }, currentValue: string) => {\n            accumulator[currentValue] = true\n            return accumulator\n          }, {}) || {},\n        refreshToken,\n        register: async data =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/register`,\n            {\n              appId: data.appId || appId,\n              username: data.username,\n              email: data.email,\n              password: data.password,\n              isBusiness: data.isBusiness ?? false,\n            },\n            { withCredentials: true },\n          ).then(({ data: { code, message, result } }) => {\n            if (code === 'SUCCESS') {\n              if (!data.withoutLogin) {\n                setAuthToken(result.authToken)\n              }\n              try {\n                const currentMemberId = jwt.decode(result.authToken)?.sub\n                const phone = sessionStorage.getItem('phone')\n                if (phone && process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT) {\n                  Axios.post(\n                    process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT,\n                    {\n                      query: `\n                        mutation INSERT_MEMBER_PHONE_ONE($currentMemberId: String!, $phone: String!) {\n                          insert_member_phone_one(object: { member_id: $currentMemberId, phone: $phone }) {\n                            id\n                          }\n                        }\n                    `,\n                      variables: {\n                        currentMemberId,\n                        phone,\n                      },\n                    },\n                    { headers: { Authorization: `Bearer ${result.authToken}` } },\n                  )\n                }\n\n                const categoryIds: string[] = JSON.parse(sessionStorage.getItem('categoryIds') || '[]')\n                const memberProperties: { propertyId?: string; value?: string }[] = JSON.parse(\n                  sessionStorage.getItem('memberProperties') || '[]',\n                )\n                if (categoryIds.length && process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT) {\n                  Axios.post(\n                    process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT,\n                    {\n                      query: `\n                        mutation INSERT_MEMBER_CATEGORIES($memberProperties: [member_property_insert_input!]!, $data: [member_category_insert_input!]!) {\n                          insert_member_property(objects: $memberProperties) {\n                            affected_rows\n                          }\n                          insert_member_category(objects: $data) {\n                            affected_rows\n                          }\n                        }\n                      `,\n                      variables: {\n                        memberProperties: memberProperties.map(v => ({\n                          member_id: currentMemberId,\n                          property_id: v.propertyId,\n                          value: v.value,\n                        })),\n                        data: categoryIds.map((categoryId, index) => ({\n                          member_id: currentMemberId,\n                          category_id: categoryId,\n                          position: index,\n                        })),\n                      },\n                    },\n                    { headers: { Authorization: `Bearer ${result.authToken}` } },\n                  )\n                }\n                const star = sessionStorage.getItem('star')\n                if (star && process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT) {\n                  Axios.post(\n                    process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT,\n                    {\n                      query: `\n                        mutation SET_MEMBER_STAR($memberId: String!, $star: numeric!) {\n                          update_member(where: {id: {_eq: $memberId}}, _set: {star: $star}) {\n                            affected_rows\n                          }\n                        }                      \n                      `,\n                      variables: {\n                        memberId: currentMemberId,\n                        star: parseInt(star),\n                      },\n                    },\n                    { headers: { Authorization: `Bearer ${result.authToken}` } },\n                  )\n                }\n                return result.authToken\n              } catch {}\n            } else {\n              setAuthToken(null)\n              throw new Error(code)\n            }\n          }),\n        login: async ({ account, password, accountLinkToken }) => {\n          const fingerPrintId = await getFingerPrintId()\n          const { ip, country, countryCode } = await fetchCurrentGeolocation()\n\n          const {\n            data: { code, message, result },\n          } = await Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/general-login`,\n            { appId, account, password, fingerPrintId, geoLocation: { ip, country, countryCode } },\n            { withCredentials: true },\n          )\n\n          if (code === 'SUCCESS') {\n            setAuthToken(result.authToken)\n            if (accountLinkToken && result.authToken) {\n              window.location.assign(`/line-binding?accountLinkToken=${accountLinkToken}`)\n            }\n          } else if (code === 'I_RESET_PASSWORD') {\n            window.location.assign(`/check-email?email=${account}&type=reset-password`)\n          } else {\n            setAuthToken(null)\n            throw getBackendServerError(code, message, result)\n          }\n          return { code }\n        },\n        socialLogin: async ({ provider, providerToken, accountLinkToken, isForceLogin }) =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/social-login`,\n            {\n              appId,\n              provider,\n              providerToken,\n              isForceLogin,\n            },\n            { withCredentials: true },\n          ).then(async ({ data: { code, message, result } }) => {\n            if (code === 'SUCCESS') {\n              setAuthToken(result.authToken)\n              const decodedToken = parsePayload(result.authToken)\n              if (!decodedToken) {\n                throw new Error('no auth token')\n              }\n              if (accountLinkToken && result.authToken) {\n                window.location.assign(`/line-binding?accountLinkToken=${accountLinkToken}`)\n              }\n            } else {\n              setAuthToken(null)\n              throw getBackendServerError(code, message, result)\n            }\n          }),\n        switchMember: async ({ memberId }) => {\n          return Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/switch-member`,\n            {\n              memberId,\n            },\n            { withCredentials: true, headers: { Authorization: 'Bearer ' + authToken } },\n          ).then(({ data: { code, _, result } }) => {\n            if (code === 'SUCCESS') {\n              setAuthToken(result.authToken)\n            } else {\n              throw new Error(code)\n            }\n          })\n        },\n        logout: async () => {\n          localStorage.clear()\n          if (typeof window !== 'undefined') {\n            window.location.assign(\n              `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/logout?redirect=${window.location.href}`,\n            )\n          }\n        },\n        sendSmsCode: async ({ phoneNumber }) =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/sms/send-code`,\n            {\n              appId,\n              phoneNumber,\n            },\n            { withCredentials: true },\n          ).then(({ data: { code } }) => {\n            if (code !== 'SUCCESS') {\n              throw new Error(code)\n            }\n          }),\n        verifySmsCode: async ({ phoneNumber, code }) =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/sms/verify-code`,\n            {\n              appId,\n              phoneNumber,\n              code,\n            },\n            { withCredentials: true },\n          ).then(({ data: { code, _, result } }) => {\n            if (code !== 'SUCCESS' || !result?.codeValid) {\n              throw new Error(code)\n            }\n          }),\n        forceLogin: async ({ account, password, accountLinkToken }) => {\n          return Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/force-login`,\n            { appId, account, password },\n            { withCredentials: true },\n          )\n            .then(({ data: { code, result } }) => {\n              if (code === 'SUCCESS') {\n                setAuthToken(result.authToken)\n                if (accountLinkToken && result.authToken && typeof window !== 'undefined') {\n                  window.location.assign(`/line-binding?accountLinkToken=${accountLinkToken}`)\n                }\n              } else if (code === 'I_RESET_PASSWORD' && typeof window !== 'undefined') {\n                window.location.assign(`/check-email?email=${account}&type=reset-password`)\n              } else {\n                setAuthToken(null)\n                throw new Error(code)\n              }\n            })\n            .catch((error: AxiosError) => {\n              throw error\n            })\n        },\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n"],"names":["defaultAuthContext","initLodestarWindow","AuthContext","createContext","useAuth","useContext","AuthProvider","appId","children","isAuthenticating","setIsAuthenticating","useState","authToken","setAuthToken","payload","useMemo","parsePayload","useEffect","phoneNumber","parsePhoneNumber","_window","ReactGA","error","refreshToken","useCallback","fingerPrintId","getFingerPrintId","ip","country","countryCode","fetchCurrentGeolocation","code","result","Axios","currentMember","event","d","jsx","accumulator","currentValue","data","message","currentMemberId","jwt","phone","categoryIds","memberProperties","v","categoryId","index","star","account","password","accountLinkToken","getBackendServerError","provider","providerToken","isForceLogin","memberId","_"],"mappings":"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"}