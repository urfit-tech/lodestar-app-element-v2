{"version":3,"file":"index.cjs9.js","sources":["../src/helpers/apollo.ts"],"sourcesContent":["import { ApolloClient, from, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { onError } from '@apollo/client/link/error'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { OperationTypeNode } from 'graphql'\nimport { createClient } from 'graphql-ws'\nimport { v4 as uuidv4 } from 'uuid'\n\ntype ApolloClientOptions = {\n  appId: string\n  authToken: string | null\n}\n\ntype ApolloCallbacks = {\n  'invalid-jwt': () => void\n}\n\n// create onError link\nconst onErrorLink = (callbacks?: ApolloCallbacks) =>\n  onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors && typeof window !== 'undefined') {\n      graphQLErrors.forEach(({ message, locations, path, extensions }) => {\n        console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`, extensions)\n        if (extensions && extensions.code === 'invalid-jwt') {\n          callbacks?.['invalid-jwt']?.()\n          setTimeout(() => window.location.assign('/'), 3000)\n        }\n      })\n      if (networkError) console.log(`[Network error]: ${JSON.stringify(networkError)}`)\n    }\n  })\n\nconst createHttpLink = (endpoint: string | undefined, options: { authToken: string | null; appId: string }) =>\n  new HttpLink({\n    uri: endpoint,\n    headers: options.authToken\n      ? {\n          authorization: `Bearer ${options.authToken}`,\n        }\n      : {\n          'x-hasura-org-id': options.appId,\n          'x-hasura-app-id': options.appId,\n          'x-hasura-user-id': uuidv4(),\n          'x-hasura-role': 'anonymous',\n        },\n  })\n\nconst createSplitLink = (appId: string, authToken: string | null) =>\n  split(\n    ({ query }) => {\n      const definition = getMainDefinition(query)\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n    },\n    new GraphQLWsLink(\n      createClient({\n        url: String(process.env.NEXT_PUBLIC_GRAPHQL_WS_ENDPOINT),\n        connectionParams: {\n          headers: authToken\n            ? {\n                authorization: `Bearer ${authToken}`,\n              }\n            : {\n                'x-hasura-org-id': appId,\n                'x-hasura-app-id': appId,\n                'x-hasura-user-id': uuidv4(),\n                'x-hasura-role': 'anonymous',\n              },\n        },\n      }),\n    ),\n    split(\n      ({ query }) => {\n        const definition = getMainDefinition(query)\n        return (definition.kind === 'OperationDefinition' && definition.operation === OperationTypeNode.QUERY) || false\n      },\n      split(\n        ({ query }) => {\n          const definition = getMainDefinition(query)\n          return (\n            (definition.kind === 'OperationDefinition' &&\n              (definition.name?.value.startsWith('Ph') || definition.name?.value.startsWith('PH_'))) ||\n            false\n          )\n        },\n        createHttpLink(process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT, { authToken, appId }),\n        createHttpLink(process.env.NEXT_PUBLIC_GRAPHQL_RH_ENDPOINT, { authToken, appId }),\n      ),\n      createHttpLink(process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT, { authToken, appId }),\n    ),\n  )\n\nexport const createApolloClient = (options: ApolloClientOptions, callbacks?: ApolloCallbacks) => {\n  const apolloClient = new ApolloClient({\n    link: from([onErrorLink(callbacks), createSplitLink(options.appId, options.authToken)]),\n    cache: new InMemoryCache(),\n  })\n  return apolloClient\n}\n"],"names":["onErrorLink","callbacks","onError","graphQLErrors","networkError","message","locations","path","extensions","createHttpLink","endpoint","options","HttpLink","uuidv4","createSplitLink","appId","authToken","split","query","definition","getMainDefinition","GraphQLWsLink","createClient","OperationTypeNode","createApolloClient","ApolloClient","from","InMemoryCache"],"mappings":"uRAkBMA,EAAeC,GACnBC,EAAAA,QAAQ,CAAC,CAAE,cAAAC,EAAe,aAAAC,KAAmB,CACvCD,GAAiB,OAAO,OAAW,MACrCA,EAAc,QAAQ,CAAC,CAAE,QAAAE,EAAS,UAAAC,EAAW,KAAAC,EAAM,WAAAC,KAAiB,CAC1D,QAAA,MAAM,6BAA6BH,CAAO,eAAeC,CAAS,WAAWC,CAAI,GAAIC,CAAU,EACnGA,GAAcA,EAAW,OAAS,gBACpCP,IAAY,aAAa,IAAI,EAC7B,WAAW,IAAM,OAAO,SAAS,OAAO,GAAG,EAAG,GAAI,EACpD,CACD,EACGG,WAAsB,IAAI,oBAAoB,KAAK,UAAUA,CAAY,CAAC,EAAE,EAEpF,CAAC,EAEGK,EAAiB,CAACC,EAA8BC,IACpD,IAAIC,EAAAA,SAAS,CACX,IAAKF,EACL,QAASC,EAAQ,UACb,CACE,cAAe,UAAUA,EAAQ,SAAS,EAAA,EAE5C,CACE,kBAAmBA,EAAQ,MAC3B,kBAAmBA,EAAQ,MAC3B,mBAAoBE,EAAAA,QAAO,EAC3B,gBAAiB,WAAA,CAEzB,CAAC,EAEGC,EAAkB,CAACC,EAAeC,IACtCC,EAAA,MACE,CAAC,CAAE,MAAAC,CAAA,IAAY,CACP,MAAAC,EAAaC,oBAAkBF,CAAK,EAC1C,OAAOC,EAAW,OAAS,uBAAyBA,EAAW,YAAc,cAC/E,EACA,IAAIE,EAAA,cACFC,eAAa,CACX,IAAK,OAAO,QAAQ,IAAI,+BAA+B,EACvD,iBAAkB,CAChB,QAASN,EACL,CACE,cAAe,UAAUA,CAAS,EAAA,EAEpC,CACE,kBAAmBD,EACnB,kBAAmBA,EACnB,mBAAoBF,EAAAA,QAAO,EAC3B,gBAAiB,WAAA,CACnB,CAEP,CAAA,CACH,EACAI,EAAA,MACE,CAAC,CAAE,MAAAC,CAAA,IAAY,CACP,MAAAC,EAAaC,oBAAkBF,CAAK,EAC1C,OAAQC,EAAW,OAAS,uBAAyBA,EAAW,YAAcI,EAAAA,kBAAkB,OAAU,EAC5G,EACAN,EAAA,MACE,CAAC,CAAE,MAAAC,CAAA,IAAY,CACP,MAAAC,EAAaC,oBAAkBF,CAAK,EAC1C,OACGC,EAAW,OAAS,wBAClBA,EAAW,MAAM,MAAM,WAAW,IAAI,GAAKA,EAAW,MAAM,MAAM,WAAW,KAAK,IACrF,EAEJ,EACAV,EAAe,QAAQ,IAAI,gCAAiC,CAAE,UAAAO,EAAW,MAAAD,EAAO,EAChFN,EAAe,QAAQ,IAAI,gCAAiC,CAAE,UAAAO,EAAW,MAAAD,CAAO,CAAA,CAClF,EACAN,EAAe,QAAQ,IAAI,gCAAiC,CAAE,UAAAO,EAAW,MAAAD,CAAO,CAAA,CAAA,CAEpF,EAEWS,EAAqB,CAACb,EAA8BV,IAC1C,IAAIwB,eAAa,CACpC,KAAMC,EAAA,KAAK,CAAC1B,EAAYC,CAAS,EAAGa,EAAgBH,EAAQ,MAAOA,EAAQ,SAAS,CAAC,CAAC,EACtF,MAAO,IAAIgB,EAAc,aAAA,CAC1B"}