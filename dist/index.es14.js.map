{"version":3,"file":"index.es14.js","sources":["../src/hooks/util.ts"],"sourcesContent":["import { useToast } from '@chakra-ui/react'\nimport FingerprintJS from '@fingerprintjs/fingerprintjs'\nimport Ajv, { JSONSchemaType } from 'ajv'\nimport axios from 'axios'\nimport jwt from 'jsonwebtoken'\nimport { useContext } from 'react'\nimport { useIntl } from 'react-intl'\nimport { codeMessages } from '../helpers/translation'\nimport { Member } from '../types/data'\nimport { IpApiResponseFail, IpApiResponseSuccess } from '../types/general'\nimport { ResourceType } from './resource'\nimport { Currency } from '../types/app'\nconst ajv = new Ajv()\n\nexport const useCurrency = (\n  locale: string,\n  currency: Currency,\n  settingCurrencyId?: string,\n  settingCoinUnit?: string,\n  currencyId?: string,\n  coinUnit?: string,\n) => {\n  const formatCurrency = (value: number) => {\n    const currentCurrencyId = currencyId || settingCurrencyId || 'TWD'\n\n    if (currentCurrencyId === 'LSC') {\n      return `${value} ${settingCoinUnit || coinUnit || 'Coins'}`\n    }\n\n    return (\n      value.toLocaleString(locale || navigator.language, {\n        style: 'currency',\n        currency: currentCurrencyId,\n        maximumFractionDigits: currency?.['minorUnits'] || 0,\n        minimumFractionDigits: 0,\n      }) || ''\n    )\n  }\n\n  return {\n    formatCurrency,\n  }\n}\n\nexport const getCookie = (cookieName: string) => {\n  const cookie: { [name: string]: string } = {}\n  document.cookie.split(';').forEach(function (el) {\n    const [key, value] = el.split('=')\n    cookie[key.trim()] = value\n  })\n  return cookie[cookieName.trim()] || ''\n}\n\nexport const getResourceByProductId = (productId: string): { type: ResourceType; target: string } => {\n  const [productType, productTarget] = productId.split('_')\n  const resourceType = productType\n    .split(/(?=[A-Z])/)\n    .join('_')\n    .toLowerCase() as ResourceType\n  return { type: resourceType, target: productTarget }\n}\n\nexport const useToastMessage = () => {\n  const { formatMessage } = useIntl()\n  const toast = useToast()\n  const toastMessage = (options: {\n    title?: string\n    status?: 'info' | 'warning' | 'success' | 'error'\n    duration?: number | null\n    position?: 'top' | 'top-right' | 'top-left' | 'bottom' | 'bottom-right' | 'bottom-left'\n    responseCode?: string\n  }) => {\n    try {\n      toast({\n        title: options.responseCode\n          ? `${formatMessage(codeMessages[options.responseCode as keyof typeof codeMessages])}`\n          : options.title,\n        status: options.status || 'success',\n        duration: options.duration || 1500,\n        position: options.position || 'top',\n      })\n    } catch {\n      alert(options.responseCode)\n    }\n  }\n  return toastMessage\n}\n\nconst fpPromise = FingerprintJS.load()\nexport const getFingerPrintId = async () => {\n  const fp = await fpPromise\n  const result = await fp.get()\n\n  const fingerPrintId = getCookie('fingerPrintId')\n\n  const visitorId = fingerPrintId.length > 0 ? fingerPrintId : result.visitorId\n  return visitorId\n}\nexport const fetchCurrentGeolocation = async () => {\n  try {\n    const getGeolocationRequest = await axios.get<IpApiResponseSuccess | IpApiResponseFail>(`https://ipapi.co/json/`)\n    if (getGeolocationRequest.data?.error) {\n      throw new Error(getGeolocationRequest.data.reason)\n    }\n    return {\n      ip: getGeolocationRequest.data.ip,\n      country: getGeolocationRequest.data.country_name,\n      countryCode: getGeolocationRequest.data.country_code,\n      error: null,\n    }\n  } catch (error) {\n    return { ip: null, country: null, countryCode: null, error }\n  }\n}\n\nexport type AuthTokenPayload = {\n  sub: string\n  orgId?: string\n  appId: string\n  name: string\n  username: string\n  email: string\n  phoneNumber?: string\n  pictureUrl?: string\n  role: string\n  permissions: string[]\n  options?: { [key: string]: any }\n  isFinishedSignUpProperty?: boolean\n  isBusiness?: boolean | null\n  loggedInMembers?: Member[]\n}\n\nexport const parsePayload = (authToken: string) => {\n  const payload = jwt.decode(authToken)\n\n  const schema: JSONSchemaType<AuthTokenPayload> = {\n    type: 'object',\n    properties: {\n      sub: { type: 'string' },\n      orgId: { type: 'string', nullable: true },\n      appId: { type: 'string' },\n      name: { type: 'string' },\n      username: { type: 'string' },\n      email: { type: 'string' },\n      phoneNumber: { type: 'string', nullable: true },\n      role: { type: 'string' },\n      pictureUrl: { type: 'string', nullable: true },\n      permissions: { type: 'array', items: { type: 'string' }, default: [] },\n      options: { type: 'object', nullable: true },\n      isFinishedSignUpProperty: { type: 'boolean', nullable: true },\n      isBusiness: { type: 'boolean', nullable: true, default: false },\n      loggedInMembers: { type: 'array', items: { type: 'object', required: [] }, nullable: true, default: [] },\n    },\n    required: [],\n  }\n\n  // validate is a type guard for MyData - type is inferred from schema type\n  const validate = ajv.compile(schema)\n  if (validate(payload)) {\n    return payload as AuthTokenPayload\n  } else {\n    console.error(`validate error: ${validate.errors?.join('\\n')}`)\n    return null\n  }\n}\n"],"names":["ajv","Ajv","useCurrency","locale","currency","settingCurrencyId","settingCoinUnit","currencyId","coinUnit","value","currentCurrencyId","getCookie","cookieName","cookie","el","key","getResourceByProductId","productId","productType","productTarget","useToastMessage","formatMessage","useIntl","toast","useToast","options","codeMessages","fpPromise","FingerprintJS","getFingerPrintId","result","fingerPrintId","fetchCurrentGeolocation","getGeolocationRequest","axios","error","parsePayload","authToken","payload","jwt","schema","validate"],"mappings":"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"}