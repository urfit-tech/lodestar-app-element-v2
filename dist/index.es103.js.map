{"version":3,"file":"index.es103.js","sources":["../../node_modules/@apollo/client/utilities/globals/invariantWrappers.js"],"sourcesContent":["import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n    return function (message) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [message].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        originalInvariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(message) {\n    var optionalParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new InvariantError(getHandledErrorMsg(message, optionalParams) ||\n        getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return stringifyForDisplay(arg, 2).slice(0, 1000);\n    }\n    catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return (global[ApolloErrorMessageHandler] &&\n        global[ApolloErrorMessageHandler](message, messageArgs.map(stringify)));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: version,\n        message: message,\n        args: messageArgs.map(stringify),\n    })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler, };\n//# sourceMappingURL=invariantWrappers.js.map"],"names":["wrap","fn","message","args","_i","arg0","getHandledErrorMsg","getFallbackErrorMsg","invariant","condition","originalInvariant","newInvariantError","optionalParams","InvariantError","ApolloErrorMessageHandler","version","stringify","arg","stringifyForDisplay","messageArgs","global"],"mappings":";;;;AAIA,SAASA,EAAKC,GAAI;AACd,SAAO,SAAUC,GAAS;AAEtB,aADIC,IAAO,CAAE,GACJC,IAAK,GAAGA,IAAK,UAAU,QAAQA;AACpC,MAAAD,EAAKC,IAAK,CAAC,IAAI,UAAUA,CAAE;AAE/B,QAAI,OAAOF,KAAY,UAAU;AAC7B,UAAIG,IAAOH;AACX,MAAAA,IAAUI,EAAmBD,CAAI,GAC5BH,MACDA,IAAUK,EAAoBF,GAAMF,CAAI,GACxCA,IAAO,CAAE;AAAA,IAEzB;AACQ,IAAAF,EAAG,MAAM,QAAQ,CAACC,CAAO,EAAE,OAAOC,CAAI,CAAC;AAAA,EAC1C;AACL;AACG,IAACK,IAAY,OAAO,OAAO,SAAmBC,GAAWP,GAAS;AAEjE,WADIC,IAAO,CAAE,GACJC,IAAK,GAAGA,IAAK,UAAU,QAAQA;AACpC,IAAAD,EAAKC,IAAK,CAAC,IAAI,UAAUA,CAAE;AAE/B,EAAKK,KACDC,EAAkBD,GAAWH,EAAmBJ,GAASC,CAAI,KAAKI,EAAoBL,GAASC,CAAI,CAAC;AAE5G,GAAG;AAAA,EACC,OAAOH,EAAKU,EAAkB,KAAK;AAAA,EACnC,KAAKV,EAAKU,EAAkB,GAAG;AAAA,EAC/B,MAAMV,EAAKU,EAAkB,IAAI;AAAA,EACjC,OAAOV,EAAKU,EAAkB,KAAK;AACvC,CAAC;AAWD,SAASC,EAAkBT,GAAS;AAEhC,WADIU,IAAiB,CAAE,GACdR,IAAK,GAAGA,IAAK,UAAU,QAAQA;AACpC,IAAAQ,EAAeR,IAAK,CAAC,IAAI,UAAUA,CAAE;AAEzC,SAAO,IAAIS,EAAeP,EAAmBJ,GAASU,CAAc,KAChEL,EAAoBL,GAASU,CAAc,CAAC;AACpD;AACG,IAACE,IAA4B,OAAO,IAAI,+BAA+BC,CAAO;AACjF,SAASC,EAAUC,GAAK;AACpB,MAAI,OAAOA,KAAO;AACd,WAAOA;AAEX,MAAI;AACA,WAAOC,EAAoBD,GAAK,CAAC,EAAE,MAAM,GAAG,GAAI;AAAA,EACxD,QACe;AACP,WAAO;AAAA,EACf;AACA;AACA,SAASX,EAAmBJ,GAASiB,GAAa;AAE9C,MADIA,MAAgB,WAAUA,IAAc,CAAA,IACxC,EAACjB;AAEL,WAAQkB,EAAON,CAAyB,KACpCM,EAAON,CAAyB,EAAEZ,GAASiB,EAAY,IAAIH,CAAS,CAAC;AAC7E;AACA,SAAST,EAAoBL,GAASiB,GAAa;AAE/C,MADIA,MAAgB,WAAUA,IAAc,CAAA,IACxC,EAACjB;AAEL,WAAO,+FAA+F,OAAO,mBAAmB,KAAK,UAAU;AAAA,MAC3I,SAASa;AAAA,MACT,SAASb;AAAA,MACT,MAAMiB,EAAY,IAAIH,CAAS;AAAA,IAClC,CAAA,CAAC,CAAC;AACP;","x_google_ignoreList":[0]}