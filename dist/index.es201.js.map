{"version":3,"file":"index.es201.js","sources":["../node_modules/axios/lib/helpers/resolveConfig.js"],"sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n"],"names":["resolveConfig","config","newConfig","mergeConfig","data","withXSRFToken","xsrfHeaderName","xsrfCookieName","headers","auth","AxiosHeaders","buildURL","buildFullPath","contentType","utils","platform","type","tokens","token","isURLSameOrigin","xsrfValue","cookies"],"mappings":";;;;;;;;AASA,MAAeA,IAAA,CAACC,MAAW;AACzB,QAAMC,IAAYC,EAAY,CAAE,GAAEF,CAAM;AAExC,MAAI,EAAC,MAAAG,GAAM,eAAAC,GAAe,gBAAAC,GAAgB,gBAAAC,GAAgB,SAAAC,GAAS,MAAAC,EAAI,IAAIP;AAE3E,EAAAA,EAAU,UAAUM,IAAUE,EAAa,KAAKF,CAAO,GAEvDN,EAAU,MAAMS,EAASC,EAAcV,EAAU,SAASA,EAAU,KAAKA,EAAU,iBAAiB,GAAGD,EAAO,QAAQA,EAAO,gBAAgB,GAGzIQ,KACFD,EAAQ;AAAA,IAAI;AAAA,IAAiB,WAC3B,MAAMC,EAAK,YAAY,MAAM,OAAOA,EAAK,WAAW,SAAS,mBAAmBA,EAAK,QAAQ,CAAC,IAAI,GAAG;AAAA,EACtG;AAGH,MAAII;AAEJ,MAAIC,EAAM,WAAWV,CAAI;AACvB,QAAIW,EAAS,yBAAyBA,EAAS;AAC7C,MAAAP,EAAQ,eAAe,MAAS;AAAA,cACtBK,IAAcL,EAAQ,eAAc,OAAQ,IAAO;AAE7D,YAAM,CAACQ,GAAM,GAAGC,CAAM,IAAIJ,IAAcA,EAAY,MAAM,GAAG,EAAE,IAAI,CAAAK,MAASA,EAAM,KAAI,CAAE,EAAE,OAAO,OAAO,IAAI,CAAE;AAC9G,MAAAV,EAAQ,eAAe,CAACQ,KAAQ,uBAAuB,GAAGC,CAAM,EAAE,KAAK,IAAI,CAAC;AAAA,IAClF;AAAA;AAOE,MAAIF,EAAS,0BACXV,KAAiBS,EAAM,WAAWT,CAAa,MAAMA,IAAgBA,EAAcH,CAAS,IAExFG,KAAkBA,MAAkB,MAASc,EAAgBjB,EAAU,GAAG,IAAI;AAEhF,UAAMkB,IAAYd,KAAkBC,KAAkBc,EAAQ,KAAKd,CAAc;AAEjF,IAAIa,KACFZ,EAAQ,IAAIF,GAAgBc,CAAS;AAAA,EAE7C;AAGE,SAAOlB;AACT;","x_google_ignoreList":[0]}