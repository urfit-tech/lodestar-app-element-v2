{"version":3,"file":"index.es201.js","sources":["../node_modules/jsonwebtoken/node_modules/semver/ranges/subset.js"],"sourcesContent":["const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n"],"names":["Range","require$$0","Comparator","require$$1","ANY","satisfies","require$$2","compare","require$$3","subset","sub","dom","options","sawNonNull","OUTER","simpleSub","simpleDom","isSub","simpleSubset","minimumVersionWithPreRelease","minimumVersion","eqSet","gt","lt","c","higherGT","lowerLT","gtltComp","eq","higher","lower","hasDomLT","hasDomGT","needDomLTPre","needDomGTPre","a","b","comp","subset_1"],"mappings":"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","x_google_ignoreList":[0]}