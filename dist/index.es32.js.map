{"version":3,"file":"index.es32.js","sources":["../../node_modules/@apollo/client/core/ApolloClient.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities/index.js\";\nimport { getApolloClientMemoryInternals } from \"../utilities/caching/getMemoryInternals.js\";\nexport { mergeOptions };\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */\nvar ApolloClient = /** @class */ (function () {\n    /**\n     * Constructs an instance of `ApolloClient`.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */\n    function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw newInvariantError(15);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, \n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? cache.assumeImmutableResults : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version, devtools = options.devtools;\n        var link = options.link;\n        if (!link) {\n            link =\n                uri ? new HttpLink({ uri: uri, credentials: credentials, headers: headers }) : ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        this.devtoolsConfig = __assign(__assign({}, devtools), { enabled: (devtools === null || devtools === void 0 ? void 0 : devtools.enabled) || connectToDevTools });\n        if (this.devtoolsConfig.enabled === undefined) {\n            this.devtoolsConfig.enabled = globalThis.__DEV__ !== false;\n        }\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.watchFragment = this.watchFragment.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: this.devtoolsConfig.enabled ?\n                function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager.getQueryStore(),\n                                mutations: _this.queryManager.mutationStore || {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                }\n                : void 0,\n        });\n        if (this.devtoolsConfig.enabled)\n            this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function () {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n        var windowWithDevTools = window;\n        var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n        (windowWithDevTools[devtoolsSymbol] =\n            windowWithDevTools[devtoolsSymbol] || []).push(this);\n        windowWithDevTools.__APOLLO_CLIENT__ = this;\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */\n        if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            if (window.document &&\n                window.top === window.self &&\n                /^(https?|file):$/.test(window.location.protocol)) {\n                setTimeout(function () {\n                    if (!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                        var nav = window.navigator;\n                        var ua = nav && nav.userAgent;\n                        var url = void 0;\n                        if (typeof ua === \"string\") {\n                            if (ua.indexOf(\"Chrome/\") > -1) {\n                                url =\n                                    \"https://chrome.google.com/webstore/detail/\" +\n                                        \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                            }\n                            else if (ua.indexOf(\"Firefox/\") > -1) {\n                                url =\n                                    \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                            }\n                        }\n                        if (url) {\n                            globalThis.__DEV__ !== false && invariant.log(\"Download the Apollo DevTools for a better development \" +\n                                \"experience: %s\", url);\n                        }\n                    }\n                }, 10000);\n            }\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */\n        get: function () {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n     * receive updated results through an observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = mergeOptions(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === \"network-only\" ||\n                options.fetchPolicy === \"cache-and-network\")) {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type `QueryOptions` that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = mergeOptions(this.defaultOptions.query, options);\n        }\n        invariant(options.fetchPolicy !== \"cache-and-network\", 16);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = mergeOptions(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * `Observable` which either emits received data or an error.\n     */\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Watches the cache store of the fragment according to the options specified\n     * and returns an `Observable`. We can subscribe to this\n     * `Observable` and receive updated results through an\n     * observer when the cache store changes.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @since 3.10.0\n     * @param options - An object of type `WatchFragmentOptions` that allows\n     * the cache to identify the fragment and optionally specify whether to react\n     * to optimistic updates.\n     */\n    ApolloClient.prototype.watchFragment = function (options) {\n        return this.cache.watchFragment(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */\n    ApolloClient.prototype.writeQuery = function (options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */\n    ApolloClient.prototype.writeFragment = function (options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: false,\n            });\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: true,\n            });\n        })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.refetchQueries = function (options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function (result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function (error) {\n            globalThis.__DEV__ !== false && invariant.debug(17, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */\n    ApolloClient.prototype.getObservableQueries = function (include) {\n        if (include === void 0) { include = \"active\"; }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     */\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     */\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     */\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     */\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */\n    ApolloClient.prototype.setLink = function (newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function () {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}());\nexport { ApolloClient };\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = getApolloClientMemoryInternals;\n}\n//# sourceMappingURL=ApolloClient.js.map"],"names":["hasSuggestedDevtools","ApolloClient","options","_this","newInvariantError","uri","credentials","headers","cache","documentTransform","_a","ssrMode","_b","ssrForceFetchDelay","connectToDevTools","_c","queryDeduplication","defaultOptions","defaultContext","_d","assumeImmutableResults","resolvers","typeDefs","fragmentMatcher","clientAwarenessName","clientAwarenessVersion","devtools","link","HttpLink","ApolloLink","__assign","version","LocalState","QueryManager","windowWithDevTools","devtoolsSymbol","nav","ua","url","invariant","mergeOptions","optimistic","ref","cb","payload","execute","fn","c","includeStandby","map","queries","results","result","obsQuery","error","include","serializedState","newLink","getApolloClientMemoryInternals"],"mappings":"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","x_google_ignoreList":[0]}