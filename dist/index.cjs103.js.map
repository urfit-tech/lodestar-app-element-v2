{"version":3,"file":"index.cjs103.js","sources":["../../node_modules/@apollo/client/utilities/globals/invariantWrappers.js"],"sourcesContent":["import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n    return function (message) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [message].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        originalInvariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(message) {\n    var optionalParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new InvariantError(getHandledErrorMsg(message, optionalParams) ||\n        getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return stringifyForDisplay(arg, 2).slice(0, 1000);\n    }\n    catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return (global[ApolloErrorMessageHandler] &&\n        global[ApolloErrorMessageHandler](message, messageArgs.map(stringify)));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: version,\n        message: message,\n        args: messageArgs.map(stringify),\n    })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler, };\n//# sourceMappingURL=invariantWrappers.js.map"],"names":["wrap","fn","message","args","_i","arg0","getHandledErrorMsg","getFallbackErrorMsg","invariant","condition","originalInvariant","newInvariantError","optionalParams","InvariantError","ApolloErrorMessageHandler","version","stringify","arg","stringifyForDisplay","messageArgs","global"],"mappings":"kNAIA,SAASA,EAAKC,EAAI,CACd,OAAO,SAAUC,EAAS,CAEtB,QADIC,EAAO,CAAE,EACJC,EAAK,EAAGA,EAAK,UAAU,OAAQA,IACpCD,EAAKC,EAAK,CAAC,EAAI,UAAUA,CAAE,EAE/B,GAAI,OAAOF,GAAY,SAAU,CAC7B,IAAIG,EAAOH,EACXA,EAAUI,EAAmBD,CAAI,EAC5BH,IACDA,EAAUK,EAAoBF,EAAMF,CAAI,EACxCA,EAAO,CAAE,EAEzB,CACQF,EAAG,MAAM,OAAQ,CAACC,CAAO,EAAE,OAAOC,CAAI,CAAC,CAC1C,CACL,CACG,IAACK,EAAY,OAAO,OAAO,SAAmBC,EAAWP,EAAS,CAEjE,QADIC,EAAO,CAAE,EACJC,EAAK,EAAGA,EAAK,UAAU,OAAQA,IACpCD,EAAKC,EAAK,CAAC,EAAI,UAAUA,CAAE,EAE1BK,GACDC,YAAkBD,EAAWH,EAAmBJ,EAASC,CAAI,GAAKI,EAAoBL,EAASC,CAAI,CAAC,CAE5G,EAAG,CACC,MAAOH,EAAKU,EAAiB,UAAC,KAAK,EACnC,IAAKV,EAAKU,EAAiB,UAAC,GAAG,EAC/B,KAAMV,EAAKU,EAAiB,UAAC,IAAI,EACjC,MAAOV,EAAKU,EAAiB,UAAC,KAAK,CACvC,CAAC,EAWD,SAASC,EAAkBT,EAAS,CAEhC,QADIU,EAAiB,CAAE,EACdR,EAAK,EAAGA,EAAK,UAAU,OAAQA,IACpCQ,EAAeR,EAAK,CAAC,EAAI,UAAUA,CAAE,EAEzC,OAAO,IAAIS,EAAc,eAACP,EAAmBJ,EAASU,CAAc,GAChEL,EAAoBL,EAASU,CAAc,CAAC,CACpD,CACG,IAACE,EAA4B,OAAO,IAAI,6BAA+BC,EAAO,OAAA,EACjF,SAASC,EAAUC,EAAK,CACpB,GAAI,OAAOA,GAAO,SACd,OAAOA,EAEX,GAAI,CACA,OAAOC,EAAAA,oBAAoBD,EAAK,CAAC,EAAE,MAAM,EAAG,GAAI,CACxD,MACe,CACP,MAAO,oBACf,CACA,CACA,SAASX,EAAmBJ,EAASiB,EAAa,CAE9C,GADIA,IAAgB,SAAUA,EAAc,CAAA,GACxC,EAACjB,EAEL,OAAQkB,EAAAA,QAAON,CAAyB,GACpCM,EAAM,QAACN,CAAyB,EAAEZ,EAASiB,EAAY,IAAIH,CAAS,CAAC,CAC7E,CACA,SAAST,EAAoBL,EAASiB,EAAa,CAE/C,GADIA,IAAgB,SAAUA,EAAc,CAAA,GACxC,EAACjB,EAEL,MAAO,+FAA+F,OAAO,mBAAmB,KAAK,UAAU,CAC3I,QAASa,EAAO,QAChB,QAASb,EACT,KAAMiB,EAAY,IAAIH,CAAS,CAClC,CAAA,CAAC,CAAC,CACP","x_google_ignoreList":[0]}