{"version":3,"file":"index.es113.js","sources":["../../node_modules/@apollo/client/react/parser/index.js"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport { AutoCleanedWeakCache, cacheSizes, } from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache;\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = \"Query\";\n            break;\n        case DocumentType.Mutation:\n            name = \"Mutation\";\n            break;\n        case DocumentType.Subscription:\n            name = \"Subscription\";\n            break;\n    }\n    return name;\n}\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document) {\n    if (!cache) {\n        cache = new AutoCleanedWeakCache(cacheSizes.parser || 1000 /* defaultCacheSizes.parser */);\n    }\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    invariant(!!document && !!document.kind, 61, document);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === \"FragmentDefinition\") {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === \"OperationDefinition\") {\n            switch (x.operation) {\n                case \"query\":\n                    queries.push(x);\n                    break;\n                case \"mutation\":\n                    mutations.push(x);\n                    break;\n                case \"subscription\":\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    invariant(!fragments.length ||\n        queries.length ||\n        mutations.length ||\n        subscriptions.length, 62);\n    invariant(\n        queries.length + mutations.length + subscriptions.length <= 1,\n        63,\n        document,\n        queries.length,\n        subscriptions.length,\n        mutations.length\n    );\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length ? queries\n        : mutations.length ? mutations\n            : subscriptions;\n    invariant(definitions.length === 1, 64, document, definitions.length);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === \"Name\") {\n        name = definition.name.value;\n    }\n    else {\n        name = \"data\"; // fallback to using data if no name\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nparser.resetCache = function () {\n    cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"parser\", function () { return (cache ? cache.size : 0); });\n}\nexport function verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    invariant(\n        operation.type === type,\n        65,\n        requiredOperationName,\n        requiredOperationName,\n        usedOperationName\n    );\n}\n//# sourceMappingURL=index.js.map"],"names":["DocumentType","cache","operationName","type","name","parser","document","AutoCleanedWeakCache","cacheSizes","cached","variables","invariant","fragments","queries","mutations","subscriptions","_i","_a","x","definitions","definition","payload","registerGlobalCache","verifyDocumentType","operation","requiredOperationName","usedOperationName"],"mappings":"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","x_google_ignoreList":[0]}