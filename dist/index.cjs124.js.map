{"version":3,"file":"index.cjs124.js","sources":["../../node_modules/ts-invariant/lib/invariant.js"],"sourcesContent":["import { __extends } from \"tslib\";\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n} : _a;\nvar InvariantError = /** @class */ (function (_super) {\n    __extends(InvariantError, _super);\n    function InvariantError(message) {\n        if (message === void 0) { message = genericMessage; }\n        var _this = _super.call(this, typeof message === \"number\"\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\n            : message) || this;\n        _this.framesToPop = 1;\n        _this.name = genericMessage;\n        setPrototypeOf(_this, InvariantError.prototype);\n        return _this;\n    }\n    return InvariantError;\n}(Error));\nexport { InvariantError };\nexport function invariant(condition, message) {\n    if (!condition) {\n        throw new InvariantError(message);\n    }\n}\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\nfunction wrapConsoleMethod(name) {\n    return function () {\n        if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n            // Default to console.log if this host environment happens not to provide\n            // all the console.* methods we need.\n            var method = console[name] || console.log;\n            return method.apply(console, arguments);\n        }\n    };\n}\n(function (invariant) {\n    invariant.debug = wrapConsoleMethod(\"debug\");\n    invariant.log = wrapConsoleMethod(\"log\");\n    invariant.warn = wrapConsoleMethod(\"warn\");\n    invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\nexport function setVerbosity(level) {\n    var old = verbosityLevels[verbosityLevel];\n    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n    return old;\n}\nexport default invariant;\n//# sourceMappingURL=invariant.js.map"],"names":["genericMessage","_a","setPrototypeOf","obj","proto","InvariantError","_super","__extends","message","_this","invariant","condition","verbosityLevels","verbosityLevel","wrapConsoleMethod","name","method"],"mappings":"oHACA,IAAIA,EAAiB,sBACjBC,EAAK,OAAO,eAAgBC,EAAiBD,IAAO,OAAS,SAAUE,EAAKC,EAAO,CACnF,OAAAD,EAAI,UAAYC,EACTD,CACX,EAAIF,EACAI,EAAgC,SAAUC,EAAQ,CAClDC,EAAS,UAACF,EAAgBC,CAAM,EAChC,SAASD,EAAeG,EAAS,CACzBA,IAAY,SAAUA,EAAUR,GACpC,IAAIS,EAAQH,EAAO,KAAK,KAAM,OAAOE,GAAY,SAC3CR,EAAiB,KAAOQ,EAAU,6DAClCA,CAAO,GAAK,KAClB,OAAAC,EAAM,YAAc,EACpBA,EAAM,KAAOT,EACbE,EAAeO,EAAOJ,EAAe,SAAS,EACvCI,CACf,CACI,OAAOJ,CACX,EAAE,KAAK,EAEA,SAASK,EAAUC,EAAWH,EAAS,CAC1C,GAAI,CAACG,EACD,MAAM,IAAIN,EAAeG,CAAO,CAExC,CACA,IAAII,EAAkB,CAAC,QAAS,MAAO,OAAQ,QAAS,QAAQ,EAC5DC,EAAiBD,EAAgB,QAAQ,KAAK,EAClD,SAASE,EAAkBC,EAAM,CAC7B,OAAO,UAAY,CACf,GAAIH,EAAgB,QAAQG,CAAI,GAAKF,EAAgB,CAGjD,IAAIG,EAAS,QAAQD,CAAI,GAAK,QAAQ,IACtC,OAAOC,EAAO,MAAM,QAAS,SAAS,CAClD,CACK,CACL,EACC,SAAUN,EAAW,CAClBA,EAAU,MAAQI,EAAkB,OAAO,EAC3CJ,EAAU,IAAMI,EAAkB,KAAK,EACvCJ,EAAU,KAAOI,EAAkB,MAAM,EACzCJ,EAAU,MAAQI,EAAkB,OAAO,CAC/C,GAAGJ,IAAcA,EAAY,CAAA,EAAG","x_google_ignoreList":[0]}