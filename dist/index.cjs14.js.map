{"version":3,"file":"index.cjs14.js","sources":["../src/hooks/util.ts"],"sourcesContent":["import { useToast } from '@chakra-ui/react'\nimport FingerprintJS from '@fingerprintjs/fingerprintjs'\nimport Ajv, { JSONSchemaType } from 'ajv'\nimport axios from 'axios'\nimport jwt from 'jsonwebtoken'\nimport { useContext } from 'react'\nimport { useIntl } from 'react-intl'\nimport { codeMessages } from '../helpers/translation'\nimport { Member } from '../types/data'\nimport { IpApiResponseFail, IpApiResponseSuccess } from '../types/general'\nimport { ResourceType } from './resource'\nimport { Currency } from '../types/app'\nconst ajv = new Ajv()\n\nexport const useCurrency = (\n  locale: string,\n  currency: Currency,\n  settingCurrencyId?: string,\n  settingCoinUnit?: string,\n  currencyId?: string,\n  coinUnit?: string,\n) => {\n  const formatCurrency = (value: number) => {\n    const currentCurrencyId = currencyId || settingCurrencyId || 'TWD'\n\n    if (currentCurrencyId === 'LSC') {\n      return `${value} ${settingCoinUnit || coinUnit || 'Coins'}`\n    }\n\n    return (\n      value.toLocaleString(locale || navigator.language, {\n        style: 'currency',\n        currency: currentCurrencyId,\n        maximumFractionDigits: currency?.['minorUnits'] || 0,\n        minimumFractionDigits: 0,\n      }) || ''\n    )\n  }\n\n  return {\n    formatCurrency,\n  }\n}\n\nexport const getCookie = (cookieName: string) => {\n  const cookie: { [name: string]: string } = {}\n  document.cookie.split(';').forEach(function (el) {\n    const [key, value] = el.split('=')\n    cookie[key.trim()] = value\n  })\n  return cookie[cookieName.trim()] || ''\n}\n\nexport const getResourceByProductId = (productId: string): { type: ResourceType; target: string } => {\n  const [productType, productTarget] = productId.split('_')\n  const resourceType = productType\n    .split(/(?=[A-Z])/)\n    .join('_')\n    .toLowerCase() as ResourceType\n  return { type: resourceType, target: productTarget }\n}\n\nexport const useToastMessage = () => {\n  const { formatMessage } = useIntl()\n  const toast = useToast()\n  const toastMessage = (options: {\n    title?: string\n    status?: 'info' | 'warning' | 'success' | 'error'\n    duration?: number | null\n    position?: 'top' | 'top-right' | 'top-left' | 'bottom' | 'bottom-right' | 'bottom-left'\n    responseCode?: string\n  }) => {\n    try {\n      toast({\n        title: options.responseCode\n          ? `${formatMessage(codeMessages[options.responseCode as keyof typeof codeMessages])}`\n          : options.title,\n        status: options.status || 'success',\n        duration: options.duration || 1500,\n        position: options.position || 'top',\n      })\n    } catch {\n      alert(options.responseCode)\n    }\n  }\n  return toastMessage\n}\n\nconst fpPromise = FingerprintJS.load()\nexport const getFingerPrintId = async () => {\n  const fp = await fpPromise\n  const result = await fp.get()\n\n  const fingerPrintId = getCookie('fingerPrintId')\n\n  const visitorId = fingerPrintId.length > 0 ? fingerPrintId : result.visitorId\n  return visitorId\n}\nexport const fetchCurrentGeolocation = async () => {\n  try {\n    const getGeolocationRequest = await axios.get<IpApiResponseSuccess | IpApiResponseFail>(`https://ipapi.co/json/`)\n    if (getGeolocationRequest.data?.error) {\n      throw new Error(getGeolocationRequest.data.reason)\n    }\n    return {\n      ip: getGeolocationRequest.data.ip,\n      country: getGeolocationRequest.data.country_name,\n      countryCode: getGeolocationRequest.data.country_code,\n      error: null,\n    }\n  } catch (error) {\n    return { ip: null, country: null, countryCode: null, error }\n  }\n}\n\nexport type AuthTokenPayload = {\n  sub: string\n  orgId?: string\n  appId: string\n  name: string\n  username: string\n  email: string\n  phoneNumber?: string\n  pictureUrl?: string\n  role: string\n  permissions: string[]\n  options?: { [key: string]: any }\n  isFinishedSignUpProperty?: boolean\n  isBusiness?: boolean | null\n  loggedInMembers?: Member[]\n}\n\nexport const parsePayload = (authToken: string) => {\n  const payload = jwt.decode(authToken)\n\n  const schema: JSONSchemaType<AuthTokenPayload> = {\n    type: 'object',\n    properties: {\n      sub: { type: 'string' },\n      orgId: { type: 'string', nullable: true },\n      appId: { type: 'string' },\n      name: { type: 'string' },\n      username: { type: 'string' },\n      email: { type: 'string' },\n      phoneNumber: { type: 'string', nullable: true },\n      role: { type: 'string' },\n      pictureUrl: { type: 'string', nullable: true },\n      permissions: { type: 'array', items: { type: 'string' }, default: [] },\n      options: { type: 'object', nullable: true },\n      isFinishedSignUpProperty: { type: 'boolean', nullable: true },\n      isBusiness: { type: 'boolean', nullable: true, default: false },\n      loggedInMembers: { type: 'array', items: { type: 'object', required: [] }, nullable: true, default: [] },\n    },\n    required: [],\n  }\n\n  // validate is a type guard for MyData - type is inferred from schema type\n  const validate = ajv.compile(schema)\n  if (validate(payload)) {\n    return payload as AuthTokenPayload\n  } else {\n    console.error(`validate error: ${validate.errors?.join('\\n')}`)\n    return null\n  }\n}\n"],"names":["ajv","Ajv","useCurrency","locale","currency","settingCurrencyId","settingCoinUnit","currencyId","coinUnit","value","currentCurrencyId","getCookie","cookieName","cookie","el","key","getResourceByProductId","productId","productType","productTarget","useToastMessage","formatMessage","useIntl","toast","useToast","options","codeMessages","fpPromise","FingerprintJS","getFingerPrintId","result","fingerPrintId","fetchCurrentGeolocation","getGeolocationRequest","axios","error","parsePayload","authToken","payload","jwt","schema","validate"],"mappings":"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"}