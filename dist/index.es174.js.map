{"version":3,"file":"index.es174.js","sources":["../../node_modules/@apollo/client/react/context/ApolloContext.js"],"sourcesContent":["import * as React from \"rehackt\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nexport function getApolloContext() {\n    invariant(\"createContext\" in React, 45);\n    var context = React.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(React.createContext, contextKey, {\n            value: (context = React.createContext({})),\n            enumerable: false,\n            writable: false,\n            configurable: true,\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport var resetApolloContext = getApolloContext;\n//# sourceMappingURL=ApolloContext.js.map"],"names":["contextKey","canUseSymbol","getApolloContext","invariant","React","context","React.createContext"],"mappings":";;;;;AAOA,IAAIA,IAAaC,IAAe,OAAO,IAAI,oBAAoB,IAAI;AAC5D,SAASC,IAAmB;AAC/B,EAAAC,EAAU,mBAAmBC,GAAO,EAAE;AACtC,MAAIC,IAAUC,EAAmB,cAACN,CAAU;AAC5C,SAAKK,MACD,OAAO,eAAeC,EAAmB,eAAEN,GAAY;AAAA,IACnD,OAAQK,IAAUC,gBAAoB,CAAA,CAAE;AAAA,IACxC,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,cAAc;AAAA,EAC1B,CAAS,GACDD,EAAQ,cAAc,kBAEnBA;AACX;","x_google_ignoreList":[0]}