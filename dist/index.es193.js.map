{"version":3,"file":"index.es193.js","sources":["../../node_modules/optimism/lib/entry.js"],"sourcesContent":["import { parentEntrySlot } from \"./context.js\";\nimport { maybeUnsubscribe, arrayFromSet } from \"./helpers.js\";\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n    if (!condition) {\n        throw new Error(optionalMessage || \"assertion failure\");\n    }\n}\nfunction valueIs(a, b) {\n    const len = a.length;\n    return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n        // Both values must be ordinary (or both exceptional) to be equal.\n        len === b.length &&\n        // The underlying value or exception must be the same.\n        a[len - 1] === b[len - 1]);\n}\nfunction valueGet(value) {\n    switch (value.length) {\n        case 0: throw new Error(\"unknown value\");\n        case 1: return value[0];\n        case 2: throw value[1];\n    }\n}\nfunction valueCopy(value) {\n    return value.slice(0);\n}\nexport class Entry {\n    constructor(fn) {\n        this.fn = fn;\n        this.parents = new Set();\n        this.childValues = new Map();\n        // When this Entry has children that are dirty, this property becomes\n        // a Set containing other Entry objects, borrowed from emptySetPool.\n        // When the set becomes empty, it gets recycled back to emptySetPool.\n        this.dirtyChildren = null;\n        this.dirty = true;\n        this.recomputing = false;\n        this.value = [];\n        this.deps = null;\n        ++Entry.count;\n    }\n    peek() {\n        if (this.value.length === 1 && !mightBeDirty(this)) {\n            rememberParent(this);\n            return this.value[0];\n        }\n    }\n    // This is the most important method of the Entry API, because it\n    // determines whether the cached this.value can be returned immediately,\n    // or must be recomputed. The overall performance of the caching system\n    // depends on the truth of the following observations: (1) this.dirty is\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n    // (3) valueGet(this.value) is usually returned without recomputation.\n    recompute(args) {\n        assert(!this.recomputing, \"already recomputing\");\n        rememberParent(this);\n        return mightBeDirty(this)\n            ? reallyRecompute(this, args)\n            : valueGet(this.value);\n    }\n    setDirty() {\n        if (this.dirty)\n            return;\n        this.dirty = true;\n        reportDirty(this);\n        // We can go ahead and unsubscribe here, since any further dirty\n        // notifications we receive will be redundant, and unsubscribing may\n        // free up some resources, e.g. file watchers.\n        maybeUnsubscribe(this);\n    }\n    dispose() {\n        this.setDirty();\n        // Sever any dependency relationships with our own children, so those\n        // children don't retain this parent Entry in their child.parents sets,\n        // thereby preventing it from being fully garbage collected.\n        forgetChildren(this);\n        // Because this entry has been kicked out of the cache (in index.js),\n        // we've lost the ability to find out if/when this entry becomes dirty,\n        // whether that happens through a subscription, because of a direct call\n        // to entry.setDirty(), or because one of its children becomes dirty.\n        // Because of this loss of future information, we have to assume the\n        // worst (that this entry might have become dirty very soon), so we must\n        // immediately mark this entry's parents as dirty. Normally we could\n        // just call entry.setDirty() rather than calling parent.setDirty() for\n        // each parent, but that would leave this entry in parent.childValues\n        // and parent.dirtyChildren, which would prevent the child from being\n        // truly forgotten.\n        eachParent(this, (parent, child) => {\n            parent.setDirty();\n            forgetChild(parent, this);\n        });\n    }\n    forget() {\n        // The code that creates Entry objects in index.ts will replace this method\n        // with one that actually removes the Entry from the cache, which will also\n        // trigger the entry.dispose method.\n        this.dispose();\n    }\n    dependOn(dep) {\n        dep.add(this);\n        if (!this.deps) {\n            this.deps = emptySetPool.pop() || new Set();\n        }\n        this.deps.add(dep);\n    }\n    forgetDeps() {\n        if (this.deps) {\n            arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n            this.deps.clear();\n            emptySetPool.push(this.deps);\n            this.deps = null;\n        }\n    }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n        child.parents.add(parent);\n        if (!parent.childValues.has(child)) {\n            parent.childValues.set(child, []);\n        }\n        if (mightBeDirty(child)) {\n            reportDirtyChild(parent, child);\n        }\n        else {\n            reportCleanChild(parent, child);\n        }\n        return parent;\n    }\n}\nfunction reallyRecompute(entry, args) {\n    forgetChildren(entry);\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\n    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n    if (maybeSubscribe(entry, args)) {\n        // If we successfully recomputed entry.value and did not fail to\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\n        setClean(entry);\n    }\n    return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n    entry.recomputing = true;\n    const { normalizeResult } = entry;\n    let oldValueCopy;\n    if (normalizeResult && entry.value.length === 1) {\n        oldValueCopy = valueCopy(entry.value);\n    }\n    // Make entry.value an empty array, representing an unknown value.\n    entry.value.length = 0;\n    try {\n        // If entry.fn succeeds, entry.value will become a normal Value.\n        entry.value[0] = entry.fn.apply(null, args);\n        // If we have a viable oldValueCopy to compare with the (successfully\n        // recomputed) new entry.value, and they are not already === identical, give\n        // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n        // and/or entry.value[0] to determine the final cached entry.value.\n        if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n            try {\n                entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n            }\n            catch (_a) {\n                // If normalizeResult throws, just use the newer value, rather than\n                // saving the exception as entry.value[1].\n            }\n        }\n    }\n    catch (e) {\n        // If entry.fn throws, entry.value will hold that exception.\n        entry.value[1] = e;\n    }\n    // Either way, this line is always reached.\n    entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n    entry.dirty = false;\n    if (mightBeDirty(entry)) {\n        // This Entry may still have dirty children, in which case we can't\n        // let our parents know we're clean just yet.\n        return;\n    }\n    reportClean(entry);\n}\nfunction reportDirty(child) {\n    eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n    eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n    const parentCount = child.parents.size;\n    if (parentCount) {\n        const parents = arrayFromSet(child.parents);\n        for (let i = 0; i < parentCount; ++i) {\n            callback(parents[i], child);\n        }\n    }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n    // Must have called rememberParent(child) before calling\n    // reportDirtyChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(mightBeDirty(child));\n    const parentWasClean = !mightBeDirty(parent);\n    if (!parent.dirtyChildren) {\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\n    }\n    else if (parent.dirtyChildren.has(child)) {\n        // If we already know this child is dirty, then we must have already\n        // informed our own parents that we are dirty, so we can terminate\n        // the recursion early.\n        return;\n    }\n    parent.dirtyChildren.add(child);\n    // If parent was clean before, it just became (possibly) dirty (according to\n    // mightBeDirty), since we just added child to parent.dirtyChildren.\n    if (parentWasClean) {\n        reportDirty(parent);\n    }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n    // Must have called rememberChild(child) before calling\n    // reportCleanChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(!mightBeDirty(child));\n    const childValue = parent.childValues.get(child);\n    if (childValue.length === 0) {\n        parent.childValues.set(child, valueCopy(child.value));\n    }\n    else if (!valueIs(childValue, child.value)) {\n        parent.setDirty();\n    }\n    removeDirtyChild(parent, child);\n    if (mightBeDirty(parent)) {\n        return;\n    }\n    reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n    const dc = parent.dirtyChildren;\n    if (dc) {\n        dc.delete(child);\n        if (dc.size === 0) {\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\n                emptySetPool.push(dc);\n            }\n            parent.dirtyChildren = null;\n        }\n    }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n    if (parent.childValues.size > 0) {\n        parent.childValues.forEach((_value, child) => {\n            forgetChild(parent, child);\n        });\n    }\n    // Remove this parent Entry from any sets to which it was added by the\n    // addToSet method.\n    parent.forgetDeps();\n    // After we forget all our children, this.dirtyChildren must be empty\n    // and therefore must have been reset to null.\n    assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n    child.parents.delete(parent);\n    parent.childValues.delete(child);\n    removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n    if (typeof entry.subscribe === \"function\") {\n        try {\n            maybeUnsubscribe(entry); // Prevent double subscriptions.\n            entry.unsubscribe = entry.subscribe.apply(null, args);\n        }\n        catch (e) {\n            // If this Entry has a subscribe function and it threw an exception\n            // (or an unsubscribe function it previously returned now throws),\n            // return false to indicate that we were not able to subscribe (or\n            // unsubscribe), and this Entry should remain dirty.\n            entry.setDirty();\n            return false;\n        }\n    }\n    // Returning true indicates either that there was no entry.subscribe\n    // function or that it succeeded.\n    return true;\n}\n//# sourceMappingURL=entry.js.map"],"names":["emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","valueIs","a","b","len","valueGet","value","valueCopy","Entry","fn","mightBeDirty","rememberParent","args","reallyRecompute","reportDirty","maybeUnsubscribe","forgetChildren","eachParent","parent","child","forgetChild","dep","arrayFromSet","parentEntrySlot","reportDirtyChild","reportCleanChild","entry","recomputeNewValue","maybeSubscribe","setClean","normalizeResult","oldValueCopy","e","reportClean","callback","parentCount","parents","i","parentWasClean","childValue","removeDirtyChild","dc","_value"],"mappings":"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","x_google_ignoreList":[0]}