{"version":3,"file":"index.es245.js","sources":["../../node_modules/@apollo/client/cache/core/cache.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { Observable, cacheSizes, getFragmentQueryDocument, mergeDeepArray, } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\nvar ApolloCache = /** @class */ (function () {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = wrap(getFragmentQueryDocument, {\n            max: cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n                1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n            cache: WeakCache,\n        });\n    }\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic\n            : options.optimistic === false ? null\n                : void 0;\n        var updateResult;\n        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || \"ROOT_QUERY\", optimistic: optimistic }));\n    };\n    /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n    ApolloCache.prototype.watchFragment = function (options) {\n        var _this = this;\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, otherOptions = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n        var query = this.getFragmentDoc(fragment, fragmentName);\n        var diffOptions = __assign(__assign({}, otherOptions), { returnPartialData: true, id: typeof from === \"string\" ? from : this.identify(from), query: query, optimistic: optimistic });\n        var latestDiff;\n        return new Observable(function (observer) {\n            return _this.watch(__assign(__assign({}, diffOptions), { immediate: true, callback: function (diff) {\n                    if (\n                    // Always ensure we deliver the first result\n                    latestDiff &&\n                        equalByQuery(query, { data: latestDiff === null || latestDiff === void 0 ? void 0 : latestDiff.result }, { data: diff.result })) {\n                        return;\n                    }\n                    var result = {\n                        data: diff.result,\n                        complete: !!diff.complete,\n                    };\n                    if (diff.missing) {\n                        result.missing = mergeDeepArray(diff.missing.map(function (error) { return error.missing; }));\n                    }\n                    latestDiff = diff;\n                    observer.next(result);\n                } }));\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n//# sourceMappingURL=cache.js.map"],"names":["ApolloCache","wrap","getFragmentQueryDocument","cacheSizes","WeakCache","options","_this","optimisticId","updateResult","transaction","document","object","optimistic","__assign","fragment","fragmentName","from","_a","otherOptions","__rest","query","diffOptions","latestDiff","Observable","observer","diff","equalByQuery","result","mergeDeepArray","error","id","data","update","cache","value","getApolloCacheMemoryInternals"],"mappings":"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","x_google_ignoreList":[0]}