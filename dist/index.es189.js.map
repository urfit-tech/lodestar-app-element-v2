{"version":3,"file":"index.es189.js","sources":["../node_modules/jsonwebtoken/node_modules/semver/classes/range.js"],"sourcesContent":["const SPACE_CHARACTERS = /\\s+/g\n\n// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.formatted = undefined\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First reduce all whitespace as much as possible so we do not have to rely\n    // on potentially slow regexes like \\s*. This is then stored and used for\n    // future error messages as well.\n    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')\n\n    // First, split on ||\n    this.set = this.raw\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.formatted = undefined\n  }\n\n  get range () {\n    if (this.formatted === undefined) {\n      this.formatted = ''\n      for (let i = 0; i < this.set.length; i++) {\n        if (i > 0) {\n          this.formatted += '||'\n        }\n        const comps = this.set[i]\n        for (let k = 0; k < comps.length; k++) {\n          if (k > 0) {\n            this.formatted += ' '\n          }\n          this.formatted += comps[k].toString().trim()\n        }\n      }\n    }\n    return this.formatted\n  }\n\n  format () {\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts =\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n      (this.options.loose && FLAG_LOOSE)\n    const memoKey = memoOpts + ':' + range\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n    debug('tilde trim', range)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n    debug('caret trim', range)\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = Range\n\nconst LRU = require('../internal/lrucache')\nconst cache = new LRU()\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  safeRe: re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require('../internal/constants')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceTilde(c, options))\n    .join(' ')\n}\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceCaret(c, options))\n    .join(' ')\n}\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp\n    .split(/\\s+/)\n    .map((c) => replaceXRange(c, options))\n    .join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp\n    .trim()\n    .replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp\n    .trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n// TODO build?\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return `${from} ${to}`.trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n"],"names":["SPACE_CHARACTERS","Range","range","options","parseOptions","Comparator","r","c","first","isNullSet","isAny","i","comps","k","memoKey","FLAG_INCLUDE_PRERELEASE","FLAG_LOOSE","cached","cache","loose","hr","re","t","hyphenReplace","debug","comparatorTrimReplace","tildeTrimReplace","caretTrimReplace","rangeList","comp","parseComparator","replaceGTE0","rangeMap","comparators","result","thisComparators","isSatisfiable","rangeComparators","thisComparator","rangeComparator","version","SemVer","testSet","LRU","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","remainingComparators","testComparator","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","id","replaceTilde","_","M","m","p","pr","ret","replaceCaret","z","replaceXRange","gtlt","xM","xm","xp","anyX","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","set","allowed"],"mappings":"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","x_google_ignoreList":[0]}