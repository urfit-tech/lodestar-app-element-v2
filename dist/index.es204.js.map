{"version":3,"file":"index.es204.js","sources":["../node_modules/jwa/index.js"],"sourcesContent":["var bufferEqual = require('buffer-equal-constant-time');\nvar Buffer = require('safe-buffer').Buffer;\nvar crypto = require('crypto');\nvar formatEcdsa = require('ecdsa-sig-formatter');\nvar util = require('util');\n\nvar MSG_INVALID_ALGORITHM = '\"%s\" is not a valid algorithm.\\n  Supported algorithms are:\\n  \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\" and \"none\".'\nvar MSG_INVALID_SECRET = 'secret must be a string or buffer';\nvar MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';\nvar MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';\n\nvar supportsKeyObjects = typeof crypto.createPublicKey === 'function';\nif (supportsKeyObjects) {\n  MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';\n  MSG_INVALID_SECRET += 'or a KeyObject';\n}\n\nfunction checkIsPublicKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return;\n  }\n\n  if (!supportsKeyObjects) {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key !== 'object') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.type !== 'string') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.asymmetricKeyType !== 'string') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.export !== 'function') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n};\n\nfunction checkIsPrivateKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return;\n  }\n\n  if (typeof key === 'object') {\n    return;\n  }\n\n  throw typeError(MSG_INVALID_SIGNER_KEY);\n};\n\nfunction checkIsSecretKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return key;\n  }\n\n  if (!supportsKeyObjects) {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (typeof key !== 'object') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (key.type !== 'secret') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (typeof key.export !== 'function') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n}\n\nfunction fromBase64(base64) {\n  return base64\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\nfunction toBase64(base64url) {\n  base64url = base64url.toString();\n\n  var padding = 4 - base64url.length % 4;\n  if (padding !== 4) {\n    for (var i = 0; i < padding; ++i) {\n      base64url += '=';\n    }\n  }\n\n  return base64url\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n}\n\nfunction typeError(template) {\n  var args = [].slice.call(arguments, 1);\n  var errMsg = util.format.bind(util, template).apply(null, args);\n  return new TypeError(errMsg);\n}\n\nfunction bufferOrString(obj) {\n  return Buffer.isBuffer(obj) || typeof obj === 'string';\n}\n\nfunction normalizeInput(thing) {\n  if (!bufferOrString(thing))\n    thing = JSON.stringify(thing);\n  return thing;\n}\n\nfunction createHmacSigner(bits) {\n  return function sign(thing, secret) {\n    checkIsSecretKey(secret);\n    thing = normalizeInput(thing);\n    var hmac = crypto.createHmac('sha' + bits, secret);\n    var sig = (hmac.update(thing), hmac.digest('base64'))\n    return fromBase64(sig);\n  }\n}\n\nfunction createHmacVerifier(bits) {\n  return function verify(thing, signature, secret) {\n    var computedSig = createHmacSigner(bits)(thing, secret);\n    return bufferEqual(Buffer.from(signature), Buffer.from(computedSig));\n  }\n}\n\nfunction createKeySigner(bits) {\n return function sign(thing, privateKey) {\n    checkIsPrivateKey(privateKey);\n    thing = normalizeInput(thing);\n    // Even though we are specifying \"RSA\" here, this works with ECDSA\n    // keys as well.\n    var signer = crypto.createSign('RSA-SHA' + bits);\n    var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));\n    return fromBase64(sig);\n  }\n}\n\nfunction createKeyVerifier(bits) {\n  return function verify(thing, signature, publicKey) {\n    checkIsPublicKey(publicKey);\n    thing = normalizeInput(thing);\n    signature = toBase64(signature);\n    var verifier = crypto.createVerify('RSA-SHA' + bits);\n    verifier.update(thing);\n    return verifier.verify(publicKey, signature, 'base64');\n  }\n}\n\nfunction createPSSKeySigner(bits) {\n  return function sign(thing, privateKey) {\n    checkIsPrivateKey(privateKey);\n    thing = normalizeInput(thing);\n    var signer = crypto.createSign('RSA-SHA' + bits);\n    var sig = (signer.update(thing), signer.sign({\n      key: privateKey,\n      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n    }, 'base64'));\n    return fromBase64(sig);\n  }\n}\n\nfunction createPSSKeyVerifier(bits) {\n  return function verify(thing, signature, publicKey) {\n    checkIsPublicKey(publicKey);\n    thing = normalizeInput(thing);\n    signature = toBase64(signature);\n    var verifier = crypto.createVerify('RSA-SHA' + bits);\n    verifier.update(thing);\n    return verifier.verify({\n      key: publicKey,\n      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n    }, signature, 'base64');\n  }\n}\n\nfunction createECDSASigner(bits) {\n  var inner = createKeySigner(bits);\n  return function sign() {\n    var signature = inner.apply(null, arguments);\n    signature = formatEcdsa.derToJose(signature, 'ES' + bits);\n    return signature;\n  };\n}\n\nfunction createECDSAVerifer(bits) {\n  var inner = createKeyVerifier(bits);\n  return function verify(thing, signature, publicKey) {\n    signature = formatEcdsa.joseToDer(signature, 'ES' + bits).toString('base64');\n    var result = inner(thing, signature, publicKey);\n    return result;\n  };\n}\n\nfunction createNoneSigner() {\n  return function sign() {\n    return '';\n  }\n}\n\nfunction createNoneVerifier() {\n  return function verify(thing, signature) {\n    return signature === '';\n  }\n}\n\nmodule.exports = function jwa(algorithm) {\n  var signerFactories = {\n    hs: createHmacSigner,\n    rs: createKeySigner,\n    ps: createPSSKeySigner,\n    es: createECDSASigner,\n    none: createNoneSigner,\n  }\n  var verifierFactories = {\n    hs: createHmacVerifier,\n    rs: createKeyVerifier,\n    ps: createPSSKeyVerifier,\n    es: createECDSAVerifer,\n    none: createNoneVerifier,\n  }\n  var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);\n  if (!match)\n    throw typeError(MSG_INVALID_ALGORITHM, algorithm);\n  var algo = (match[1] || match[3]).toLowerCase();\n  var bits = match[2];\n\n  return {\n    sign: signerFactories[algo](bits),\n    verify: verifierFactories[algo](bits),\n  }\n};\n"],"names":["bufferEqual","require$$0","Buffer","require$$1","crypto","require$$2","formatEcdsa","require$$3","util","require$$4","MSG_INVALID_ALGORITHM","MSG_INVALID_SECRET","MSG_INVALID_VERIFIER_KEY","MSG_INVALID_SIGNER_KEY","supportsKeyObjects","checkIsPublicKey","key","typeError","checkIsPrivateKey","checkIsSecretKey","fromBase64","base64","toBase64","base64url","padding","i","template","args","errMsg","bufferOrString","obj","normalizeInput","thing","createHmacSigner","bits","secret","hmac","sig","createHmacVerifier","signature","computedSig","createKeySigner","privateKey","signer","createKeyVerifier","publicKey","verifier","createPSSKeySigner","createPSSKeyVerifier","createECDSASigner","inner","createECDSAVerifer","result","createNoneSigner","createNoneVerifier","jwa","algorithm","signerFactories","verifierFactories","match","algo"],"mappings":";;;;;;;;;AAAA,MAAIA,IAAcC,EAAqC,GACnDC,IAASC,EAAsB,EAAC,QAChCC,IAASC,GACTC,IAAcC,EAA8B,GAC5CC,IAAOC,EAAe,GAEtBC,IAAwB;AAAA;AAAA,2HACxBC,IAAqB,qCACrBC,IAA2B,oCAC3BC,IAAyB,+CAEzBC,IAAqB,OAAOV,EAAO,mBAAoB;AAC3D,EAAIU,MACFF,KAA4B,mBAC5BD,KAAsB;AAGxB,WAASI,EAAiBC,GAAK;AAC7B,QAAI,CAAAd,EAAO,SAASc,CAAG,KAInB,OAAOA,KAAQ,aAIf,CAACF,KAID,OAAOE,KAAQ,YAIf,OAAOA,EAAI,QAAS,YAIpB,OAAOA,EAAI,qBAAsB,YAIjC,OAAOA,EAAI,UAAW;AACxB,YAAMC,EAAUL,CAAwB;AAAA;AAI5C,WAASM,EAAkBF,GAAK;AAC9B,QAAI,CAAAd,EAAO,SAASc,CAAG,KAInB,OAAOA,KAAQ,YAIf,OAAOA,KAAQ;AAInB,YAAMC,EAAUJ,CAAsB;AAAA;AAGxC,WAASM,EAAiBH,GAAK;AAC7B,QAAI,CAAAd,EAAO,SAASc,CAAG,GAIvB;AAAA,UAAI,OAAOA,KAAQ;AACjB,eAAOA;AAeT,UAZI,CAACF,KAID,OAAOE,KAAQ,YAIfA,EAAI,SAAS,YAIb,OAAOA,EAAI,UAAW;AACxB,cAAMC,EAAUN,CAAkB;AAAA;AAAA,EAEtC;AAEA,WAASS,EAAWC,GAAQ;AAC1B,WAAOA,EACJ,QAAQ,MAAM,EAAE,EAChB,QAAQ,OAAO,GAAG,EAClB,QAAQ,OAAO,GAAG;AAAA,EACvB;AAEA,WAASC,EAASC,GAAW;AAC3B,IAAAA,IAAYA,EAAU,SAAU;AAEhC,QAAIC,IAAU,IAAID,EAAU,SAAS;AACrC,QAAIC,MAAY;AACd,eAASC,IAAI,GAAGA,IAAID,GAAS,EAAEC;AAC7B,QAAAF,KAAa;AAIjB,WAAOA,EACJ,QAAQ,OAAO,GAAG,EAClB,QAAQ,MAAM,GAAG;AAAA,EACtB;AAEA,WAASN,EAAUS,GAAU;AAC3B,QAAIC,IAAO,CAAA,EAAG,MAAM,KAAK,WAAW,CAAC,GACjCC,IAASpB,EAAK,OAAO,KAAKA,GAAMkB,CAAQ,EAAE,MAAM,MAAMC,CAAI;AAC9D,WAAO,IAAI,UAAUC,CAAM;AAAA,EAC7B;AAEA,WAASC,EAAeC,GAAK;AAC3B,WAAO5B,EAAO,SAAS4B,CAAG,KAAK,OAAOA,KAAQ;AAAA,EAChD;AAEA,WAASC,EAAeC,GAAO;AAC7B,WAAKH,EAAeG,CAAK,MACvBA,IAAQ,KAAK,UAAUA,CAAK,IACvBA;AAAA,EACT;AAEA,WAASC,EAAiBC,GAAM;AAC9B,WAAO,SAAcF,GAAOG,GAAQ;AAClC,MAAAhB,EAAiBgB,CAAM,GACvBH,IAAQD,EAAeC,CAAK;AAC5B,UAAII,IAAOhC,EAAO,WAAW,QAAQ8B,GAAMC,CAAM,GAC7CE,KAAOD,EAAK,OAAOJ,CAAK,GAAGI,EAAK,OAAO,QAAQ;AACnD,aAAOhB,EAAWiB,CAAG;AAAA,IACzB;AAAA,EACA;AAEA,WAASC,EAAmBJ,GAAM;AAChC,WAAO,SAAgBF,GAAOO,GAAWJ,GAAQ;AAC/C,UAAIK,IAAcP,EAAiBC,CAAI,EAAEF,GAAOG,CAAM;AACtD,aAAOnC,EAAYE,EAAO,KAAKqC,CAAS,GAAGrC,EAAO,KAAKsC,CAAW,CAAC;AAAA,IACvE;AAAA,EACA;AAEA,WAASC,EAAgBP,GAAM;AAC9B,WAAO,SAAcF,GAAOU,GAAY;AACrC,MAAAxB,EAAkBwB,CAAU,GAC5BV,IAAQD,EAAeC,CAAK;AAG5B,UAAIW,IAASvC,EAAO,WAAW,YAAY8B,CAAI,GAC3CG,KAAOM,EAAO,OAAOX,CAAK,GAAGW,EAAO,KAAKD,GAAY,QAAQ;AACjE,aAAOtB,EAAWiB,CAAG;AAAA,IACzB;AAAA,EACA;AAEA,WAASO,EAAkBV,GAAM;AAC/B,WAAO,SAAgBF,GAAOO,GAAWM,GAAW;AAClD,MAAA9B,EAAiB8B,CAAS,GAC1Bb,IAAQD,EAAeC,CAAK,GAC5BO,IAAYjB,EAASiB,CAAS;AAC9B,UAAIO,IAAW1C,EAAO,aAAa,YAAY8B,CAAI;AACnD,aAAAY,EAAS,OAAOd,CAAK,GACdc,EAAS,OAAOD,GAAWN,GAAW,QAAQ;AAAA,IACzD;AAAA,EACA;AAEA,WAASQ,EAAmBb,GAAM;AAChC,WAAO,SAAcF,GAAOU,GAAY;AACtC,MAAAxB,EAAkBwB,CAAU,GAC5BV,IAAQD,EAAeC,CAAK;AAC5B,UAAIW,IAASvC,EAAO,WAAW,YAAY8B,CAAI,GAC3CG,KAAOM,EAAO,OAAOX,CAAK,GAAGW,EAAO,KAAK;AAAA,QAC3C,KAAKD;AAAA,QACL,SAAStC,EAAO,UAAU;AAAA,QAC1B,YAAYA,EAAO,UAAU;AAAA,MAC9B,GAAE,QAAQ;AACX,aAAOgB,EAAWiB,CAAG;AAAA,IACzB;AAAA,EACA;AAEA,WAASW,EAAqBd,GAAM;AAClC,WAAO,SAAgBF,GAAOO,GAAWM,GAAW;AAClD,MAAA9B,EAAiB8B,CAAS,GAC1Bb,IAAQD,EAAeC,CAAK,GAC5BO,IAAYjB,EAASiB,CAAS;AAC9B,UAAIO,IAAW1C,EAAO,aAAa,YAAY8B,CAAI;AACnD,aAAAY,EAAS,OAAOd,CAAK,GACdc,EAAS,OAAO;AAAA,QACrB,KAAKD;AAAA,QACL,SAASzC,EAAO,UAAU;AAAA,QAC1B,YAAYA,EAAO,UAAU;AAAA,MACnC,GAAOmC,GAAW,QAAQ;AAAA,IAC1B;AAAA,EACA;AAEA,WAASU,EAAkBf,GAAM;AAC/B,QAAIgB,IAAQT,EAAgBP,CAAI;AAChC,WAAO,WAAgB;AACrB,UAAIK,IAAYW,EAAM,MAAM,MAAM,SAAS;AAC3C,aAAAX,IAAYjC,EAAY,UAAUiC,GAAW,OAAOL,CAAI,GACjDK;AAAA,IACR;AAAA,EACH;AAEA,WAASY,EAAmBjB,GAAM;AAChC,QAAIgB,IAAQN,EAAkBV,CAAI;AAClC,WAAO,SAAgBF,GAAOO,GAAWM,GAAW;AAClD,MAAAN,IAAYjC,EAAY,UAAUiC,GAAW,OAAOL,CAAI,EAAE,SAAS,QAAQ;AAC3E,UAAIkB,IAASF,EAAMlB,GAAOO,GAAWM,CAAS;AAC9C,aAAOO;AAAA,IACR;AAAA,EACH;AAEA,WAASC,IAAmB;AAC1B,WAAO,WAAgB;AACrB,aAAO;AAAA,IACX;AAAA,EACA;AAEA,WAASC,IAAqB;AAC5B,WAAO,SAAgBtB,GAAOO,GAAW;AACvC,aAAOA,MAAc;AAAA,IACzB;AAAA,EACA;AAEA,SAAAgB,IAAiB,SAAaC,GAAW;AACvC,QAAIC,IAAkB;AAAA,MACpB,IAAIxB;AAAA,MACJ,IAAIQ;AAAA,MACJ,IAAIM;AAAA,MACJ,IAAIE;AAAA,MACJ,MAAMI;AAAA,IACV,GACMK,IAAoB;AAAA,MACtB,IAAIpB;AAAA,MACJ,IAAIM;AAAA,MACJ,IAAII;AAAA,MACJ,IAAIG;AAAA,MACJ,MAAMG;AAAA,IACV,GACMK,IAAQH,EAAU,MAAM,wCAAwC;AACpE,QAAI,CAACG;AACH,YAAM1C,EAAUP,GAAuB8C,CAAS;AAClD,QAAII,KAAQD,EAAM,CAAC,KAAKA,EAAM,CAAC,GAAG,YAAa,GAC3CzB,IAAOyB,EAAM,CAAC;AAElB,WAAO;AAAA,MACL,MAAMF,EAAgBG,CAAI,EAAE1B,CAAI;AAAA,MAChC,QAAQwB,EAAkBE,CAAI,EAAE1B,CAAI;AAAA,IACxC;AAAA,EACC;;","x_google_ignoreList":[0]}