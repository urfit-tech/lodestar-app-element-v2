{"version":3,"file":"index.es69.js","sources":["../node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"],"sourcesContent":["const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require('./asymmetricKeyDetailsSupported');\nconst RSA_PSS_KEY_DETAILS_SUPPORTED = require('./rsaPssKeyDetailsSupported');\n\nconst allowedAlgorithmsForKeys = {\n  'ec': ['ES256', 'ES384', 'ES512'],\n  'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\n  'rsa-pss': ['PS256', 'PS384', 'PS512']\n};\n\nconst allowedCurves = {\n  ES256: 'prime256v1',\n  ES384: 'secp384r1',\n  ES512: 'secp521r1',\n};\n\nmodule.exports = function(algorithm, key) {\n  if (!algorithm || !key) return;\n\n  const keyType = key.asymmetricKeyType;\n  if (!keyType) return;\n\n  const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\n\n  if (!allowedAlgorithms) {\n    throw new Error(`Unknown key type \"${keyType}\".`);\n  }\n\n  if (!allowedAlgorithms.includes(algorithm)) {\n    throw new Error(`\"alg\" parameter for \"${keyType}\" key type must be one of: ${allowedAlgorithms.join(', ')}.`)\n  }\n\n  /*\n   * Ignore the next block from test coverage because it gets executed\n   * conditionally depending on the Node version. Not ignoring it would\n   * prevent us from reaching the target % of coverage for versions of\n   * Node under 15.7.0.\n   */\n  /* istanbul ignore next */\n  if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\n    switch (keyType) {\n    case 'ec':\n      const keyCurve = key.asymmetricKeyDetails.namedCurve;\n      const allowedCurve = allowedCurves[algorithm];\n\n      if (keyCurve !== allowedCurve) {\n        throw new Error(`\"alg\" parameter \"${algorithm}\" requires curve \"${allowedCurve}\".`);\n      }\n      break;\n\n    case 'rsa-pss':\n      if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\n        const length = parseInt(algorithm.slice(-3), 10);\n        const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;\n\n        if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${algorithm}.`);\n        }\n\n        if (saltLength !== undefined && saltLength > length >> 3) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${algorithm}.`)\n        }\n      }\n      break;\n    }\n  }\n}\n"],"names":["ASYMMETRIC_KEY_DETAILS_SUPPORTED","require$$0","RSA_PSS_KEY_DETAILS_SUPPORTED","require$$1","allowedAlgorithmsForKeys","allowedCurves","validateAsymmetricKey","algorithm","key","keyType","allowedAlgorithms","keyCurve","allowedCurve","length","hashAlgorithm","mgf1HashAlgorithm","saltLength"],"mappings":";;;;;;AAAA,QAAMA,IAAmCC,EAA0C,GAC7EC,IAAgCC,EAAsC,GAEtEC,IAA2B;AAAA,IAC/B,IAAM,CAAC,SAAS,SAAS,OAAO;AAAA,IAChC,KAAO,CAAC,SAAS,SAAS,SAAS,SAAS,SAAS,OAAO;AAAA,IAC5D,WAAW,CAAC,SAAS,SAAS,OAAO;AAAA,EACtC,GAEKC,IAAgB;AAAA,IACpB,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,EACR;AAED,SAAAC,IAAiB,SAASC,GAAWC,GAAK;AACxC,QAAI,CAACD,KAAa,CAACC,EAAK;AAExB,UAAMC,IAAUD,EAAI;AACpB,QAAI,CAACC,EAAS;AAEd,UAAMC,IAAoBN,EAAyBK,CAAO;AAE1D,QAAI,CAACC;AACH,YAAM,IAAI,MAAM,qBAAqBD,CAAO,IAAI;AAGlD,QAAI,CAACC,EAAkB,SAASH,CAAS;AACvC,YAAM,IAAI,MAAM,wBAAwBE,CAAO,8BAA8BC,EAAkB,KAAK,IAAI,CAAC,GAAG;AAU9G,QAAIV;AACF,cAAQS,GAAO;AAAA,QACf,KAAK;AACH,gBAAME,IAAWH,EAAI,qBAAqB,YACpCI,IAAeP,EAAcE,CAAS;AAE5C,cAAII,MAAaC;AACf,kBAAM,IAAI,MAAM,oBAAoBL,CAAS,qBAAqBK,CAAY,IAAI;AAEpF;AAAA,QAEF,KAAK;AACH,cAAIV,GAA+B;AACjC,kBAAMW,IAAS,SAASN,EAAU,MAAM,EAAE,GAAG,EAAE,GACzC,EAAE,eAAAO,GAAe,mBAAAC,GAAmB,YAAAC,EAAY,IAAGR,EAAI;AAE7D,gBAAIM,MAAkB,MAAMD,CAAM,MAAME,MAAsBD;AAC5D,oBAAM,IAAI,MAAM,gGAAgGP,CAAS,GAAG;AAG9H,gBAAIS,MAAe,UAAaA,IAAaH,KAAU;AACrD,oBAAM,IAAI,MAAM,4GAA4GN,CAAS,GAAG;AAAA,UAElJ;AACM;AAAA,MACN;AAAA,EAEA;;","x_google_ignoreList":[0]}