{"version":3,"file":"index.es264.js","sources":["../../node_modules/@apollo/client/link/http/rewriteURIForGET.js"],"sourcesContent":["import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, \"Variables map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, \"Extensions map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return { newURI: newURI };\n}\n//# sourceMappingURL=rewriteURIForGET.js.map"],"names":["rewriteURIForGET","chosenURI","body","queryParams","addQueryParam","key","value","serializedVariables","serializeFetchParameter","parseError","serializedExtensions","fragment","preFragment","fragmentStart","queryParamsPrefix","newURI"],"mappings":";AAGO,SAASA,EAAiBC,GAAWC,GAAM;AAG9C,MAAIC,IAAc,CAAE,GAChBC,IAAgB,SAAUC,GAAKC,GAAO;AACtC,IAAAH,EAAY,KAAK,GAAG,OAAOE,GAAK,GAAG,EAAE,OAAO,mBAAmBC,CAAK,CAAC,CAAC;AAAA,EACzE;AAOD,MANI,WAAWJ,KACXE,EAAc,SAASF,EAAK,KAAK,GAEjCA,EAAK,iBACLE,EAAc,iBAAiBF,EAAK,aAAa,GAEjDA,EAAK,WAAW;AAChB,QAAIK,IAAsB;AAC1B,QAAI;AACA,MAAAA,IAAsBC,EAAwBN,EAAK,WAAW,eAAe;AAAA,IACzF,SACeO,GAAY;AACf,aAAO,EAAE,YAAYA,EAAY;AAAA,IAC7C;AACQ,IAAAL,EAAc,aAAaG,CAAmB;AAAA,EACtD;AACI,MAAIL,EAAK,YAAY;AACjB,QAAIQ,IAAuB;AAC3B,QAAI;AACA,MAAAA,IAAuBF,EAAwBN,EAAK,YAAY,gBAAgB;AAAA,IAC5F,SACeO,GAAY;AACf,aAAO,EAAE,YAAYA,EAAY;AAAA,IAC7C;AACQ,IAAAL,EAAc,cAAcM,CAAoB;AAAA,EACxD;AAOI,MAAIC,IAAW,IAAIC,IAAcX,GAC7BY,IAAgBZ,EAAU,QAAQ,GAAG;AACzC,EAAIY,MAAkB,OAClBF,IAAWV,EAAU,OAAOY,CAAa,GACzCD,IAAcX,EAAU,OAAO,GAAGY,CAAa;AAEnD,MAAIC,IAAoBF,EAAY,QAAQ,GAAG,MAAM,KAAK,MAAM,KAC5DG,IAASH,IAAcE,IAAoBX,EAAY,KAAK,GAAG,IAAIQ;AACvE,SAAO,EAAE,QAAQI,EAAQ;AAC7B;","x_google_ignoreList":[0]}