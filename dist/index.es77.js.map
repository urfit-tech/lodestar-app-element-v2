{"version":3,"file":"index.es77.js","sources":["../../node_modules/@apollo/client/utilities/common/canonicalStringify.js"],"sourcesContent":["import { AutoCleanedStrongCache, cacheSizes, } from \"../../utilities/caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */\nexport var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function () {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new AutoCleanedStrongCache(cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */);\n    },\n});\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"canonicalStringify\", function () { return sortingMap.size; });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder))\n                return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function (key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n}\n//# sourceMappingURL=canonicalStringify.js.map"],"names":["canonicalStringify","value","stableObjectReplacer","sortingMap","AutoCleanedStrongCache","cacheSizes","registerGlobalCache","key","proto","keys","everyKeyInOrder","unsortedKey","sortedKeys","sortedKey","sortedObject_1","i"],"mappings":";;;AAmBU,IAACA,IAAqB,OAAO,OAAO,SAA4BC,GAAO;AAC7E,SAAO,KAAK,UAAUA,GAAOC,CAAoB;AACrD,GAAG;AAAA,EACC,OAAO,WAAY;AAIf,IAAAC,IAAa,IAAIC;AAAA,MAAuBC,EAAW,sBAAsB;AAAA;AAAA,IAAgD;AAAA,EAC5H;AACL,CAAC;AACG,WAAW,YAAY,MACvBC,EAAoB,sBAAsB,WAAY;AAAE,SAAOH,EAAW;AAAK,CAAE;AAIrF,IAAIA;AACJH,EAAmB,MAAO;AAO1B,SAASE,EAAqBK,GAAKN,GAAO;AACtC,MAAIA,KAAS,OAAOA,KAAU,UAAU;AACpC,QAAIO,IAAQ,OAAO,eAAeP,CAAK;AAIvC,QAAIO,MAAU,OAAO,aAAaA,MAAU,MAAM;AAC9C,UAAIC,IAAO,OAAO,KAAKR,CAAK;AAG5B,UAAIQ,EAAK,MAAMC,CAAe;AAC1B,eAAOT;AACX,UAAIU,IAAc,KAAK,UAAUF,CAAI,GACjCG,IAAaT,EAAW,IAAIQ,CAAW;AAC3C,UAAI,CAACC,GAAY;AACb,QAAAH,EAAK,KAAM;AACX,YAAII,IAAY,KAAK,UAAUJ,CAAI;AAGnC,QAAAG,IAAaT,EAAW,IAAIU,CAAS,KAAKJ,GAC1CN,EAAW,IAAIQ,GAAaC,CAAU,GACtCT,EAAW,IAAIU,GAAWD,CAAU;AAAA,MACpD;AACY,UAAIE,IAAiB,OAAO,OAAON,CAAK;AAGxC,aAAAI,EAAW,QAAQ,SAAUL,GAAK;AAC9B,QAAAO,EAAeP,CAAG,IAAIN,EAAMM,CAAG;AAAA,MAC/C,CAAa,GACMO;AAAA,IACnB;AAAA,EACA;AACI,SAAOb;AACX;AAKA,SAASS,EAAgBH,GAAKQ,GAAGN,GAAM;AACnC,SAAOM,MAAM,KAAKN,EAAKM,IAAI,CAAC,KAAKR;AACrC;","x_google_ignoreList":[0]}