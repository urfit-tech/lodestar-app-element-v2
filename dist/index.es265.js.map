{"version":3,"file":"index.es265.js","sources":["../../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { print } from \"../../utilities/index.js\";\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false,\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\",\n};\nvar defaultOptions = {\n    method: \"POST\",\n};\nexport var fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nexport var defaultPrinter = function (ast, printer) { return printer(ast); };\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation,\n        defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function (config) {\n        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), config.headers) });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = __assign(__assign({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery)\n        body.query = printer(query, print);\n    return {\n        options: options,\n        body: body,\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = Object.create(null);\n        Object.keys(Object(headers)).forEach(function (name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name],\n        };\n    });\n    var normalizedHeaders = Object.create(null);\n    Object.keys(headerData).forEach(function (name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n}\n//# sourceMappingURL=selectHttpOptionsAndBody.js.map"],"names":["defaultHttpOptions","defaultHeaders","defaultOptions","fallbackHttpConfig","defaultPrinter","ast","printer","selectHttpOptionsAndBodyInternal","operation","configs","_i","options","http","config","__assign","removeDuplicateHeaders","operationName","extensions","variables","query","body","print","headers","preserveHeaderCase","normalizedHeaders_1","name","headerData","normalizedHeaders"],"mappings":";;AAEA,IAAIA,IAAqB;AAAA,EACrB,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,oBAAoB;AACxB,GACIC,IAAiB;AAAA;AAAA,EAEjB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaR,gBAAgB;AACpB,GACIC,IAAiB;AAAA,EACjB,QAAQ;AACZ,GACWC,IAAqB;AAAA,EAC5B,MAAMH;AAAA,EACN,SAASC;AAAA,EACT,SAASC;AACb,GACWE,IAAiB,SAAUC,GAAKC,GAAS;AAAE,SAAOA,EAAQD,CAAG;AAAE;AAUnE,SAASE,EAAiCC,GAAWF,GAAS;AAEjE,WADIG,IAAU,CAAE,GACPC,IAAK,GAAGA,IAAK,UAAU,QAAQA;AACpC,IAAAD,EAAQC,IAAK,CAAC,IAAI,UAAUA,CAAE;AAElC,MAAIC,IAAU,CAAE,GACZC,IAAO,CAAE;AACb,EAAAH,EAAQ,QAAQ,SAAUI,GAAQ;AAC9B,IAAAF,IAAUG,EAASA,EAASA,EAAS,CAAE,GAAEH,CAAO,GAAGE,EAAO,OAAO,GAAG,EAAE,SAASC,EAASA,EAAS,IAAIH,EAAQ,OAAO,GAAGE,EAAO,OAAO,GAAG,GACpIA,EAAO,gBACPF,EAAQ,cAAcE,EAAO,cAEjCD,IAAOE,EAASA,EAAS,CAAA,GAAIF,CAAI,GAAGC,EAAO,IAAI;AAAA,EACvD,CAAK,GACGF,EAAQ,YACRA,EAAQ,UAAUI,EAAuBJ,EAAQ,SAASC,EAAK,kBAAkB;AAGrF,MAAII,IAAgBR,EAAU,eAAeS,IAAaT,EAAU,YAAYU,IAAYV,EAAU,WAAWW,IAAQX,EAAU,OAC/HY,IAAO,EAAE,eAAeJ,GAAe,WAAWE,EAAW;AACjE,SAAIN,EAAK,sBACLQ,EAAK,aAAaH,IAElBL,EAAK,iBACLQ,EAAK,QAAQd,EAAQa,GAAOE,CAAK,IAC9B;AAAA,IACH,SAASV;AAAA,IACT,MAAMS;AAAA,EACT;AACL;AAIA,SAASL,EAAuBO,GAASC,GAAoB;AAEzD,MAAI,CAACA,GAAoB;AACrB,QAAIC,IAAsB,uBAAO,OAAO,IAAI;AAC5C,kBAAO,KAAK,OAAOF,CAAO,CAAC,EAAE,QAAQ,SAAUG,GAAM;AACjD,MAAAD,EAAoBC,EAAK,YAAa,CAAA,IAAIH,EAAQG,CAAI;AAAA,IAClE,CAAS,GACMD;AAAA,EACf;AAKI,MAAIE,IAAa,uBAAO,OAAO,IAAI;AACnC,SAAO,KAAK,OAAOJ,CAAO,CAAC,EAAE,QAAQ,SAAUG,GAAM;AACjD,IAAAC,EAAWD,EAAK,YAAW,CAAE,IAAI;AAAA,MAC7B,cAAcA;AAAA,MACd,OAAOH,EAAQG,CAAI;AAAA,IACtB;AAAA,EACT,CAAK;AACD,MAAIE,IAAoB,uBAAO,OAAO,IAAI;AAC1C,gBAAO,KAAKD,CAAU,EAAE,QAAQ,SAAUD,GAAM;AAC5C,IAAAE,EAAkBD,EAAWD,CAAI,EAAE,YAAY,IAAIC,EAAWD,CAAI,EAAE;AAAA,EAC5E,CAAK,GACME;AACX;","x_google_ignoreList":[0]}