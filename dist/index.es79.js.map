{"version":3,"file":"index.es79.js","sources":["../../node_modules/@apollo/client/utilities/graphql/fragments.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw newInvariantError(\n                73,\n                definition.operation,\n                definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\"\n            );\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        invariant(fragments.length === 1, 74, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\": {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            invariant(fragment, 75, fragmentName);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map"],"names":["getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definition","newInvariantError","invariant","query","__assign","__spreadArray","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"mappings":";;;AAwBO,SAASA,EAAyBC,GAAUC,GAAc;AAC7D,MAAIC,IAAqBD,GAIrBE,IAAY,CAAE;AAClB,EAAAH,EAAS,YAAY,QAAQ,SAAUI,GAAY;AAG/C,QAAIA,EAAW,SAAS;AACpB,YAAMC;AAAA,QACF;AAAA,QACAD,EAAW;AAAA,QACXA,EAAW,OAAO,WAAW,OAAOA,EAAW,KAAK,OAAO,GAAG,IAAI;AAAA,MACrE;AAIL,IAAIA,EAAW,SAAS,wBACpBD,EAAU,KAAKC,CAAU;AAAA,EAErC,CAAK,GAGG,OAAOF,IAAuB,QAC9BI,EAAUH,EAAU,WAAW,GAAG,IAAIA,EAAU,MAAM,GACtDD,IAAqBC,EAAU,CAAC,EAAE,KAAK;AAI3C,MAAII,IAAQC,EAASA,EAAS,CAAA,GAAIR,CAAQ,GAAG,EAAE,aAAaS,EAAc;AAAA,IAClE;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,WAAW;AAAA,MACX,cAAc;AAAA,QACV,MAAM;AAAA,QACN,YAAY;AAAA,UACR;AAAA,YACI,MAAM;AAAA,YACN,MAAM;AAAA,cACF,MAAM;AAAA,cACN,OAAOP;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACjB;AAAA,EACS,GAAEF,EAAS,aAAa,EAAI,GAAG;AACpC,SAAOO;AACX;AAGO,SAASG,EAAkBP,GAAW;AACzC,EAAIA,MAAc,WAAUA,IAAY,CAAA;AACxC,MAAIQ,IAAW,CAAE;AACjB,SAAAR,EAAU,QAAQ,SAAUS,GAAU;AAClC,IAAAD,EAASC,EAAS,KAAK,KAAK,IAAIA;AAAA,EACxC,CAAK,GACMD;AACX;AACO,SAASE,EAAyBC,GAAWC,GAAa;AAC7D,UAAQD,EAAU,MAAI;AAAA,IAClB,KAAK;AACD,aAAOA;AAAA,IACX,KAAK,kBAAkB;AACnB,UAAIb,IAAea,EAAU,KAAK;AAClC,UAAI,OAAOC,KAAgB;AACvB,eAAOA,EAAYd,CAAY;AAEnC,UAAIW,IAAWG,KAAeA,EAAYd,CAAY;AACtD,aAAAK,EAAUM,GAAU,IAAIX,CAAY,GAC7BW,KAAY;AAAA,IAC/B;AAAA,IACQ;AACI,aAAO;AAAA,EACnB;AACA;","x_google_ignoreList":[0]}