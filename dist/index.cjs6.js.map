{"version":3,"file":"index.cjs6.js","sources":["../src/contexts/AuthContext.tsx"],"sourcesContent":["import Axios, { AxiosError } from 'axios'\nimport jwt from 'jsonwebtoken'\nimport parsePhoneNumber from 'libphonenumber-js'\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport ReactGA from 'react-ga'\nimport { getBackendServerError } from '../helpers'\nimport { AuthTokenPayload, fetchCurrentGeolocation, getFingerPrintId, parsePayload } from '../hooks/util'\nimport { Permission } from '../types/app'\nimport { Member, UserRole } from '../types/data'\nimport { LodestarWindow } from '../types/lodestar.window'\ndeclare let window: LodestarWindow\n\ntype ProviderType = 'facebook' | 'google' | 'line' | 'parenting' | 'commonhealth' | 'cw'\n\ntype AuthProps = {\n  isAuthenticating: boolean\n  isAuthenticated: boolean\n  currentUserRole: UserRole\n  currentMemberId: string | null\n  authToken: string | null\n  isFinishedSignUpProperty: boolean\n  updateAuthToken?: (authToken: string | null) => void\n  currentMember: Pick<Member, 'id' | 'name' | 'username' | 'email' | 'pictureUrl' | 'role' | 'options'> | null\n  permissions: { [key in Permission]?: boolean }\n  refreshToken?: () => Promise<void>\n  register?: (data: {\n    appId?: string\n    username: string\n    email: string\n    password: string\n    withoutLogin?: boolean\n    isBusiness?: boolean\n  }) => Promise<any>\n  login?: (data: { account: string; password: string; accountLinkToken?: string }) => Promise<{ code: string }>\n  socialLogin?: (data: {\n    provider: ProviderType\n    providerToken: any\n    accountLinkToken?: string\n    isForceLogin?: boolean\n  }) => Promise<void>\n  switchMember?: (data: { memberId: string }) => Promise<void>\n  logout?: () => Promise<void>\n  sendSmsCode?: (data: { phoneNumber: string }) => Promise<void>\n  verifySmsCode?: (data: { phoneNumber: string; code: string }) => Promise<void>\n  forceLogin?: (data: { account: string; password: string; accountLinkToken?: string }) => Promise<void>\n}\n\nconst defaultAuthContext: AuthProps = {\n  isAuthenticating: (window as any).AUTH_TOKEN ? false : true,\n  isAuthenticated: false,\n  currentUserRole: 'anonymous',\n  currentMemberId: null,\n  authToken: null,\n  currentMember: null,\n  permissions: {},\n  isFinishedSignUpProperty: true,\n}\n\nconst initLodestarWindow = () => {\n  if (typeof window !== 'undefined') {\n    window.lodestar = window.lodestar || {}\n  }\n}\n\nconst AuthContext = createContext<AuthProps>(defaultAuthContext)\nexport const useAuth = () => useContext(AuthContext)\n\nexport const AuthProvider: React.FC<React.PropsWithChildren<{ appId: string }>> = ({ appId, children }) => {\n  const [isAuthenticating, setIsAuthenticating] = useState(defaultAuthContext.isAuthenticating)\n  const [authToken, setAuthToken] = useState<string | null>((window as any).AUTH_TOKEN || null)\n  const payload = useMemo(() => (authToken ? parsePayload(authToken) : null), [authToken])\n\n  useEffect(() => {\n    if (payload) {\n      try {\n        const phoneNumber = payload?.phoneNumber ? parsePhoneNumber(payload.phoneNumber, 'TW') : null\n        const _window = window as any\n        _window.insider_object = {\n          user: {\n            gdpr_optin: true,\n            sms_optin: true,\n            email: payload.email,\n            phone_number: phoneNumber?.isValid() ? phoneNumber.number : payload.phoneNumber,\n            email_optin: true,\n          },\n        }\n        ReactGA.set({ userId: payload.sub })\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error(error)\n        }\n      }\n    }\n  }, [payload, window])\n\n  const refreshToken = useCallback(async () => {\n    const fingerPrintId = await getFingerPrintId()\n    const { ip, country, countryCode } = await fetchCurrentGeolocation()\n    const {\n      data: { code, result },\n    } = await Axios.post(\n      `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/refresh-token`,\n      { appId, fingerPrintId, geoLocation: { ip, country, countryCode } },\n      {\n        method: 'POST',\n        withCredentials: true,\n      },\n    )\n    if (code === 'SUCCESS') {\n      setAuthToken(result.authToken)\n    } else if (code === 'E_NO_DEVICE') {\n      setAuthToken(null)\n      alert('您已被登出，目前有其他裝置登入這組帳號')\n    } else {\n      setAuthToken(null)\n    }\n    setIsAuthenticating(false)\n  }, [appId])\n\n  const currentMember = payload && {\n    id: payload.sub,\n    name: payload.name,\n    username: payload.username,\n    email: payload.email,\n    pictureUrl: payload.pictureUrl || null,\n    role: payload.role as UserRole,\n    options: payload.options || {},\n  }\n\n  initLodestarWindow()\n  if (typeof window !== 'undefined') {\n    window.lodestar.getCurrentMember = () => currentMember\n    window.lodestar.getDataLayerByEvent = (event: string) =>\n      (window as any).dataLayer.find((d: any) => d.event === event)\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticating,\n        isAuthenticated: Boolean(authToken),\n        currentUserRole: (payload?.role as UserRole) || 'anonymous',\n        currentMemberId: payload?.sub || null,\n        authToken,\n        updateAuthToken: authToken => setAuthToken(authToken),\n        isFinishedSignUpProperty: !!payload?.isFinishedSignUpProperty,\n        currentMember,\n        permissions:\n          payload?.permissions?.reduce((accumulator: { [key: string]: boolean }, currentValue: string) => {\n            accumulator[currentValue] = true\n            return accumulator\n          }, {}) || {},\n        refreshToken,\n        register: async data =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/register`,\n            {\n              appId: data.appId || appId,\n              username: data.username,\n              email: data.email,\n              password: data.password,\n              isBusiness: data.isBusiness ?? false,\n            },\n            { withCredentials: true },\n          ).then(({ data: { code, message, result } }) => {\n            if (code === 'SUCCESS') {\n              if (!data.withoutLogin) {\n                setAuthToken(result.authToken)\n              }\n              try {\n                const currentMemberId = jwt.decode(result.authToken)?.sub\n                const phone = sessionStorage.getItem('phone')\n                if (phone && process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT) {\n                  Axios.post(\n                    process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT,\n                    {\n                      query: `\n                        mutation INSERT_MEMBER_PHONE_ONE($currentMemberId: String!, $phone: String!) {\n                          insert_member_phone_one(object: { member_id: $currentMemberId, phone: $phone }) {\n                            id\n                          }\n                        }\n                    `,\n                      variables: {\n                        currentMemberId,\n                        phone,\n                      },\n                    },\n                    { headers: { Authorization: `Bearer ${result.authToken}` } },\n                  )\n                }\n\n                const categoryIds: string[] = JSON.parse(sessionStorage.getItem('categoryIds') || '[]')\n                const memberProperties: { propertyId?: string; value?: string }[] = JSON.parse(\n                  sessionStorage.getItem('memberProperties') || '[]',\n                )\n                if (categoryIds.length && process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT) {\n                  Axios.post(\n                    process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT,\n                    {\n                      query: `\n                        mutation INSERT_MEMBER_CATEGORIES($memberProperties: [member_property_insert_input!]!, $data: [member_category_insert_input!]!) {\n                          insert_member_property(objects: $memberProperties) {\n                            affected_rows\n                          }\n                          insert_member_category(objects: $data) {\n                            affected_rows\n                          }\n                        }\n                      `,\n                      variables: {\n                        memberProperties: memberProperties.map(v => ({\n                          member_id: currentMemberId,\n                          property_id: v.propertyId,\n                          value: v.value,\n                        })),\n                        data: categoryIds.map((categoryId, index) => ({\n                          member_id: currentMemberId,\n                          category_id: categoryId,\n                          position: index,\n                        })),\n                      },\n                    },\n                    { headers: { Authorization: `Bearer ${result.authToken}` } },\n                  )\n                }\n                const star = sessionStorage.getItem('star')\n                if (star && process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT) {\n                  Axios.post(\n                    process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT,\n                    {\n                      query: `\n                        mutation SET_MEMBER_STAR($memberId: String!, $star: numeric!) {\n                          update_member(where: {id: {_eq: $memberId}}, _set: {star: $star}) {\n                            affected_rows\n                          }\n                        }                      \n                      `,\n                      variables: {\n                        memberId: currentMemberId,\n                        star: parseInt(star),\n                      },\n                    },\n                    { headers: { Authorization: `Bearer ${result.authToken}` } },\n                  )\n                }\n                return result.authToken\n              } catch {}\n            } else {\n              setAuthToken(null)\n              throw new Error(code)\n            }\n          }),\n        login: async ({ account, password, accountLinkToken }) => {\n          const fingerPrintId = await getFingerPrintId()\n          const { ip, country, countryCode } = await fetchCurrentGeolocation()\n\n          const {\n            data: { code, message, result },\n          } = await Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/general-login`,\n            { appId, account, password, fingerPrintId, geoLocation: { ip, country, countryCode } },\n            { withCredentials: true },\n          )\n\n          if (code === 'SUCCESS') {\n            setAuthToken(result.authToken)\n            if (accountLinkToken && result.authToken) {\n              window.location.assign(`/line-binding?accountLinkToken=${accountLinkToken}`)\n            }\n          } else if (code === 'I_RESET_PASSWORD') {\n            window.location.assign(`/check-email?email=${account}&type=reset-password`)\n          } else {\n            setAuthToken(null)\n            throw getBackendServerError(code, message, result)\n          }\n          return { code }\n        },\n        socialLogin: async ({ provider, providerToken, accountLinkToken, isForceLogin }) =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/social-login`,\n            {\n              appId,\n              provider,\n              providerToken,\n              isForceLogin,\n            },\n            { withCredentials: true },\n          ).then(async ({ data: { code, message, result } }) => {\n            if (code === 'SUCCESS') {\n              setAuthToken(result.authToken)\n              const decodedToken = parsePayload(result.authToken)\n              if (!decodedToken) {\n                throw new Error('no auth token')\n              }\n              if (accountLinkToken && result.authToken) {\n                window.location.assign(`/line-binding?accountLinkToken=${accountLinkToken}`)\n              }\n            } else {\n              setAuthToken(null)\n              throw getBackendServerError(code, message, result)\n            }\n          }),\n        switchMember: async ({ memberId }) => {\n          return Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/switch-member`,\n            {\n              memberId,\n            },\n            { withCredentials: true, headers: { Authorization: 'Bearer ' + authToken } },\n          ).then(({ data: { code, _, result } }) => {\n            if (code === 'SUCCESS') {\n              setAuthToken(result.authToken)\n            } else {\n              throw new Error(code)\n            }\n          })\n        },\n        logout: async () => {\n          localStorage.clear()\n          if (typeof window !== 'undefined') {\n            window.location.assign(\n              `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/logout?redirect=${window.location.href}`,\n            )\n          }\n        },\n        sendSmsCode: async ({ phoneNumber }) =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/sms/send-code`,\n            {\n              appId,\n              phoneNumber,\n            },\n            { withCredentials: true },\n          ).then(({ data: { code } }) => {\n            if (code !== 'SUCCESS') {\n              throw new Error(code)\n            }\n          }),\n        verifySmsCode: async ({ phoneNumber, code }) =>\n          Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/sms/verify-code`,\n            {\n              appId,\n              phoneNumber,\n              code,\n            },\n            { withCredentials: true },\n          ).then(({ data: { code, _, result } }) => {\n            if (code !== 'SUCCESS' || !result?.codeValid) {\n              throw new Error(code)\n            }\n          }),\n        forceLogin: async ({ account, password, accountLinkToken }) => {\n          return Axios.post(\n            `${process.env.NEXT_PUBLIC_API_BASE_ROOT}/auth/force-login`,\n            { appId, account, password },\n            { withCredentials: true },\n          )\n            .then(({ data: { code, result } }) => {\n              if (code === 'SUCCESS') {\n                setAuthToken(result.authToken)\n                if (accountLinkToken && result.authToken && typeof window !== 'undefined') {\n                  window.location.assign(`/line-binding?accountLinkToken=${accountLinkToken}`)\n                }\n              } else if (code === 'I_RESET_PASSWORD' && typeof window !== 'undefined') {\n                window.location.assign(`/check-email?email=${account}&type=reset-password`)\n              } else {\n                setAuthToken(null)\n                throw new Error(code)\n              }\n            })\n            .catch((error: AxiosError) => {\n              throw error\n            })\n        },\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n"],"names":["defaultAuthContext","initLodestarWindow","AuthContext","createContext","useAuth","useContext","AuthProvider","appId","children","isAuthenticating","setIsAuthenticating","useState","authToken","setAuthToken","payload","useMemo","parsePayload","useEffect","phoneNumber","parsePhoneNumber","_window","ReactGA","error","refreshToken","useCallback","fingerPrintId","getFingerPrintId","ip","country","countryCode","fetchCurrentGeolocation","code","result","Axios","currentMember","event","d","jsx","accumulator","currentValue","data","message","currentMemberId","jwt","phone","categoryIds","memberProperties","v","categoryId","index","star","account","password","accountLinkToken","getBackendServerError","provider","providerToken","isForceLogin","memberId","_"],"mappings":"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"}