{"version":3,"file":"index.cjs13.js","sources":["../src/hooks/resource.ts"],"sourcesContent":["import { ApolloClient, gql, useQuery } from '@apollo/client'\nimport { useMemo } from 'react'\nimport hasura from '../hasura'\nimport { Member } from '../types/data'\n\nexport type ResourceType =\n  | 'program_package'\n  | 'program_package_plan'\n  | 'program'\n  | 'program_content'\n  | 'program_plan'\n  | 'activity'\n  | 'activity_ticket'\n  | 'podcast_album'\n  | 'podcast_plan'\n  | 'podcast_program'\n  | 'member_shop'\n  | 'merchandise'\n  | 'merchandise_spec'\n  | 'project'\n  | 'project_plan'\n  | 'post'\n  | 'member'\n  | 'unknown'\n\nexport type Resource = {\n  id: string\n  urn: string\n  type: ResourceType\n  title: string\n  owners: Pick<Member, 'id' | 'name'>[]\n  sku?: string\n  price?: number\n  categories?: string[]\n  tags?: string[]\n  variants?: string[] // FIXME: may remove this item and replace by options ?\n  products?: (Resource | null)[]\n  metaId?: string\n  options?: { [key: string]: any }\n}\n\nconst composeResourceCollection = (\n  urns: string[],\n  data?: hasura.GET_RESOURCE_COLLECTION,\n  withProducts: boolean = false,\n): (Resource | null)[] => {\n  const resources =\n    data?.resource\n      .filter(v => v.id !== null)\n      .map(v => {\n        const resourceUrn = v.id as string\n        const [, resourceType, resourceId] = resourceUrn.split(':')\n        return {\n          urn: resourceUrn,\n          id: resourceId,\n          type: resourceType as ResourceType,\n          title: v.name || '',\n          owners: v.owners || [],\n          price: v.price || 0,\n          categories: v.categories || [],\n          tags: v.tags || [],\n          variants: v.variants || [],\n          sku: v.sku || undefined,\n          metaId: v.meta_id || undefined,\n        }\n      }) || []\n\n  const filteredResources = urns.map(urn => {\n    const resourceData = resources.find(v => v.urn === urn)\n    return resourceData ?? null\n  })\n  if (withProducts) {\n    const resourceWithProducts = filteredResources.map(resource => {\n      return resource\n        ? {\n            ...resource,\n            products: resources.filter(r => r.metaId === resource.urn && r.urn !== resource.urn),\n          }\n        : null\n    })\n    return resourceWithProducts\n  }\n\n  return filteredResources\n}\n\nexport const getResourceCollection = async (\n  apolloClient: ApolloClient<unknown>,\n  urns: string[],\n  withProductType?: boolean,\n): Promise<(Resource | null)[]> => {\n  const { data } = await apolloClient.query<hasura.GET_RESOURCE_COLLECTION, hasura.GET_RESOURCE_COLLECTIONVariables>({\n    query: GET_RESOURCE_COLLECTION,\n    variables: { urns },\n  })\n  const resourceCollection = composeResourceCollection(urns, data, withProductType)\n  return resourceCollection\n}\n\nexport const useResourceCollection = (urns: string[], withProducts: boolean = false) => {\n  const { data, loading } = useQuery<hasura.GET_RESOURCE_COLLECTION, hasura.GET_RESOURCE_COLLECTIONVariables>(\n    GET_RESOURCE_COLLECTION,\n    {\n      variables: { urns },\n    },\n  )\n  const resourceCollection: (Resource | null)[] = useMemo(\n    () => composeResourceCollection(urns, data, withProducts),\n    [data, urns, withProducts],\n  )\n  return {\n    loading,\n    resourceCollection,\n  }\n}\n\nconst GET_RESOURCE_COLLECTION = gql`\n  query GET_RESOURCE_COLLECTION($urns: [String!]!) {\n    resource(where: { _or: [{ id: { _in: $urns } }, { meta_id: { _in: $urns } }] }) {\n      id\n      name\n      price\n      categories\n      tags\n      variants\n      owners\n      sku\n      meta_id\n    }\n  }\n`\n"],"names":["composeResourceCollection","urns","data","withProducts","resources","v","resourceUrn","resourceType","resourceId","filteredResources","urn","resource","r","getResourceCollection","apolloClient","withProductType","GET_RESOURCE_COLLECTION","useResourceCollection","loading","useQuery","resourceCollection","useMemo","gql"],"mappings":"qIAyCMA,EAA4B,CAChCC,EACAC,EACAC,EAAwB,KACA,CAClB,MAAAC,EACJF,GAAM,SACH,OAAOG,GAAKA,EAAE,KAAO,IAAI,EACzB,IAASA,GAAA,CACR,MAAMC,EAAcD,EAAE,GAChB,CAAA,CAAGE,EAAcC,CAAU,EAAIF,EAAY,MAAM,GAAG,EACnD,MAAA,CACL,IAAKA,EACL,GAAIE,EACJ,KAAMD,EACN,MAAOF,EAAE,MAAQ,GACjB,OAAQA,EAAE,QAAU,CAAC,EACrB,MAAOA,EAAE,OAAS,EAClB,WAAYA,EAAE,YAAc,CAAC,EAC7B,KAAMA,EAAE,MAAQ,CAAC,EACjB,SAAUA,EAAE,UAAY,CAAC,EACzB,IAAKA,EAAE,KAAO,OACd,OAAQA,EAAE,SAAW,MACvB,CACD,CAAA,GAAK,CAAC,EAELI,EAAoBR,EAAK,IAAWS,GACnBN,EAAU,KAAUC,GAAAA,EAAE,MAAQK,CAAG,GAC/B,IACxB,EACD,OAAIP,EAC2BM,EAAkB,IAAgBE,GACtDA,EACH,CACE,GAAGA,EACH,SAAUP,EAAU,OAAYQ,GAAAA,EAAE,SAAWD,EAAS,KAAOC,EAAE,MAAQD,EAAS,GAAG,CAAA,EAErF,IACL,EAIIF,CACT,EAEaI,EAAwB,MACnCC,EACAb,EACAc,IACiC,CACjC,KAAM,CAAE,KAAAb,CAAA,EAAS,MAAMY,EAAa,MAA+E,CACjH,MAAOE,EACP,UAAW,CAAE,KAAAf,CAAK,CAAA,CACnB,EAEM,OADoBD,EAA0BC,EAAMC,EAAMa,CAAe,CAElF,EAEaE,EAAwB,CAAChB,EAAgBE,EAAwB,KAAU,CAChF,KAAA,CAAE,KAAAD,EAAM,QAAAgB,CAAA,EAAYC,EAAA,SACxBH,EACA,CACE,UAAW,CAAE,KAAAf,CAAK,CAAA,CAEtB,EACMmB,EAA0CC,EAAA,QAC9C,IAAMrB,EAA0BC,EAAMC,EAAMC,CAAY,EACxD,CAACD,EAAMD,EAAME,CAAY,CAC3B,EACO,MAAA,CACL,QAAAe,EACA,mBAAAE,CACF,CACF,EAEMJ,EAA0BM,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"}