{"version":3,"file":"index.cjs196.js","sources":["../node_modules/jsonwebtoken/node_modules/semver/ranges/outside.js"],"sourcesContent":["const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst { ANY } = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n"],"names":["SemVer","require$$0","Comparator","require$$1","ANY","Range","require$$2","satisfies","require$$3","gt","require$$4","lt","require$$5","lte","require$$6","gte","require$$7","outside_1","version","range","hilo","options","gtfn","ltefn","ltfn","comp","ecomp","i","comparators","high","low","comparator"],"mappings":"qXAAA,MAAMA,EAASC,EAAA,UAAA,EACTC,EAAaC,EAAA,UAAA,EACb,CAAE,IAAAC,CAAG,EAAKF,EACVG,EAAQC,EAAA,UAAA,EACRC,EAAYC,EAAA,UAAA,EACZC,EAAKC,EAAA,UAAA,EACLC,EAAKC,EAAA,UAAA,EACLC,EAAMC,EAAA,UAAA,EACNC,EAAMC,EAAA,UAAA,EAuEZ,OAAAC,EArEgB,CAACC,EAASC,EAAOC,EAAMC,IAAY,CACjDH,EAAU,IAAIlB,EAAOkB,EAASG,CAAO,EACrCF,EAAQ,IAAId,EAAMc,EAAOE,CAAO,EAEhC,IAAIC,EAAMC,EAAOC,EAAMC,EAAMC,EAC7B,OAAQN,EAAI,CACV,IAAK,IACHE,EAAOb,EACPc,EAAQV,EACRW,EAAOb,EACPc,EAAO,IACPC,EAAQ,KACR,MACF,IAAK,IACHJ,EAAOX,EACPY,EAAQR,EACRS,EAAOf,EACPgB,EAAO,IACPC,EAAQ,KACR,MACF,QACE,MAAM,IAAI,UAAU,uCAAuC,CACjE,CAGE,GAAInB,EAAUW,EAASC,EAAOE,CAAO,EACnC,MAAO,GAMT,QAASM,EAAI,EAAGA,EAAIR,EAAM,IAAI,OAAQ,EAAEQ,EAAG,CACzC,MAAMC,EAAcT,EAAM,IAAIQ,CAAC,EAE/B,IAAIE,EAAO,KACPC,EAAM,KAuBV,GArBAF,EAAY,QAASG,GAAe,CAC9BA,EAAW,SAAW3B,IACxB2B,EAAa,IAAI7B,EAAW,SAAS,GAEvC2B,EAAOA,GAAQE,EACfD,EAAMA,GAAOC,EACTT,EAAKS,EAAW,OAAQF,EAAK,OAAQR,CAAO,EAC9CQ,EAAOE,EACEP,EAAKO,EAAW,OAAQD,EAAI,OAAQT,CAAO,IACpDS,EAAMC,EAET,CAAA,EAIGF,EAAK,WAAaJ,GAAQI,EAAK,WAAaH,IAM3C,CAACI,EAAI,UAAYA,EAAI,WAAaL,IACnCF,EAAML,EAASY,EAAI,MAAM,EAC3B,MAAO,GACF,GAAIA,EAAI,WAAaJ,GAASF,EAAKN,EAASY,EAAI,MAAM,EAC3D,MAAO,EAEb,CACE,MAAO,EACT","x_google_ignoreList":[0]}