{"version":3,"file":"index.es18.js","sources":["../../node_modules/graphql-tag/lib/index.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map"],"names":["docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","cacheKeyFromLoc","loc","processFragments","ast","seenKeys","definitions","fragmentDefinition","fragmentName","sourceKey","sourceKeySet","__assign","stripLoc","doc","workSet","node","key","value","parseDocument","source","cacheKey","parsed","parse","gql","literals","args","_i","result","arg","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","extras","gql_1"],"mappings":"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","x_google_ignoreList":[0]}