{"version":3,"file":"index.es159.js","sources":["../../node_modules/ts-invariant/lib/invariant.js"],"sourcesContent":["import { __extends } from \"tslib\";\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n} : _a;\nvar InvariantError = /** @class */ (function (_super) {\n    __extends(InvariantError, _super);\n    function InvariantError(message) {\n        if (message === void 0) { message = genericMessage; }\n        var _this = _super.call(this, typeof message === \"number\"\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\n            : message) || this;\n        _this.framesToPop = 1;\n        _this.name = genericMessage;\n        setPrototypeOf(_this, InvariantError.prototype);\n        return _this;\n    }\n    return InvariantError;\n}(Error));\nexport { InvariantError };\nexport function invariant(condition, message) {\n    if (!condition) {\n        throw new InvariantError(message);\n    }\n}\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\nfunction wrapConsoleMethod(name) {\n    return function () {\n        if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n            // Default to console.log if this host environment happens not to provide\n            // all the console.* methods we need.\n            var method = console[name] || console.log;\n            return method.apply(console, arguments);\n        }\n    };\n}\n(function (invariant) {\n    invariant.debug = wrapConsoleMethod(\"debug\");\n    invariant.log = wrapConsoleMethod(\"log\");\n    invariant.warn = wrapConsoleMethod(\"warn\");\n    invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\nexport function setVerbosity(level) {\n    var old = verbosityLevels[verbosityLevel];\n    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n    return old;\n}\nexport default invariant;\n//# sourceMappingURL=invariant.js.map"],"names":["genericMessage","_a","setPrototypeOf","obj","proto","InvariantError","_super","__extends","message","_this","invariant","condition","verbosityLevels","verbosityLevel","wrapConsoleMethod","name","method"],"mappings":";AACA,IAAIA,IAAiB,uBACjBC,IAAK,OAAO,gBAAgBC,IAAiBD,MAAO,SAAS,SAAUE,GAAKC,GAAO;AACnF,SAAAD,EAAI,YAAYC,GACTD;AACX,IAAIF,GACAI;AAAA;AAAA,EAAgC,SAAUC,GAAQ;AAClD,IAAAC,EAAUF,GAAgBC,CAAM;AAChC,aAASD,EAAeG,GAAS;AAC7B,MAAIA,MAAY,WAAUA,IAAUR;AACpC,UAAIS,IAAQH,EAAO,KAAK,MAAM,OAAOE,KAAY,WAC3CR,IAAiB,OAAOQ,IAAU,+DAClCA,CAAO,KAAK;AAClB,aAAAC,EAAM,cAAc,GACpBA,EAAM,OAAOT,GACbE,EAAeO,GAAOJ,EAAe,SAAS,GACvCI;AAAA,IACf;AACI,WAAOJ;AAAA,EACX,EAAE,KAAK;AAAA;AAEA,SAASK,EAAUC,GAAWH,GAAS;AAC1C,MAAI,CAACG;AACD,UAAM,IAAIN,EAAeG,CAAO;AAExC;AACA,IAAII,IAAkB,CAAC,SAAS,OAAO,QAAQ,SAAS,QAAQ,GAC5DC,IAAiBD,EAAgB,QAAQ,KAAK;AAClD,SAASE,EAAkBC,GAAM;AAC7B,SAAO,WAAY;AACf,QAAIH,EAAgB,QAAQG,CAAI,KAAKF,GAAgB;AAGjD,UAAIG,IAAS,QAAQD,CAAI,KAAK,QAAQ;AACtC,aAAOC,EAAO,MAAM,SAAS,SAAS;AAAA,IAClD;AAAA,EACK;AACL;AAAA,CACC,SAAUN,GAAW;AAClB,EAAAA,EAAU,QAAQI,EAAkB,OAAO,GAC3CJ,EAAU,MAAMI,EAAkB,KAAK,GACvCJ,EAAU,OAAOI,EAAkB,MAAM,GACzCJ,EAAU,QAAQI,EAAkB,OAAO;AAC/C,GAAGJ,MAAcA,IAAY,CAAA,EAAG;","x_google_ignoreList":[0]}