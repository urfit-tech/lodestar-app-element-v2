"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const E=require("./index.cjs224.js"),_=require("./index.cjs225.js");var u,p;function O(){if(p)return u;p=1;var o=function(){};if(process.env.NODE_ENV!=="production"){var l=E.__require(),a={},y=_.__require();o=function(r){var t="Warning: "+r;typeof console<"u"&&console.error(t);try{throw new Error(t)}catch{}}}function f(r,t,i,s,c){if(process.env.NODE_ENV!=="production"){for(var e in r)if(y(r,e)){var n;try{if(typeof r[e]!="function"){var h=Error((s||"React class")+": "+i+" type `"+e+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof r[e]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw h.name="Invariant Violation",h}n=r[e](t,e,s,i,null,l)}catch(d){n=d}if(n&&!(n instanceof Error)&&o((s||"React class")+": type specification of "+i+" `"+e+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof n+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),n instanceof Error&&!(n.message in a)){a[n.message]=!0;var v=c?c():"";o("Failed "+i+" type: "+n.message+(v??""))}}}}return f.resetWarningCache=function(){process.env.NODE_ENV!=="production"&&(a={})},u=f,u}exports.__require=O;
//# sourceMappingURL=index.cjs226.js.map
