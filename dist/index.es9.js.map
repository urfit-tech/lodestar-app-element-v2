{"version":3,"file":"index.es9.js","sources":["../src/helpers/apollo.ts"],"sourcesContent":["import { ApolloClient, from, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { onError } from '@apollo/client/link/error'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { OperationTypeNode } from 'graphql'\nimport { createClient } from 'graphql-ws'\nimport { v4 as uuidv4 } from 'uuid'\n\ntype ApolloClientOptions = {\n  appId: string\n  authToken: string | null\n}\n\ntype ApolloCallbacks = {\n  'invalid-jwt': () => void\n}\n\n// create onError link\nconst onErrorLink = (callbacks?: ApolloCallbacks) =>\n  onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors && typeof window !== 'undefined') {\n      graphQLErrors.forEach(({ message, locations, path, extensions }) => {\n        console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`, extensions)\n        if (extensions && extensions.code === 'invalid-jwt') {\n          callbacks?.['invalid-jwt']?.()\n          setTimeout(() => window.location.assign('/'), 3000)\n        }\n      })\n      if (networkError) console.log(`[Network error]: ${JSON.stringify(networkError)}`)\n    }\n  })\n\nconst createHttpLink = (endpoint: string | undefined, options: { authToken: string | null; appId: string }) =>\n  new HttpLink({\n    uri: endpoint,\n    headers: options.authToken\n      ? {\n          authorization: `Bearer ${options.authToken}`,\n        }\n      : {\n          'x-hasura-org-id': options.appId,\n          'x-hasura-app-id': options.appId,\n          'x-hasura-user-id': uuidv4(),\n          'x-hasura-role': 'anonymous',\n        },\n  })\n\nconst createSplitLink = (appId: string, authToken: string | null) =>\n  split(\n    ({ query }) => {\n      const definition = getMainDefinition(query)\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n    },\n    new GraphQLWsLink(\n      createClient({\n        url: String(process.env.NEXT_PUBLIC_GRAPHQL_WS_ENDPOINT),\n        connectionParams: {\n          headers: authToken\n            ? {\n                authorization: `Bearer ${authToken}`,\n              }\n            : {\n                'x-hasura-org-id': appId,\n                'x-hasura-app-id': appId,\n                'x-hasura-user-id': uuidv4(),\n                'x-hasura-role': 'anonymous',\n              },\n        },\n      }),\n    ),\n    split(\n      ({ query }) => {\n        const definition = getMainDefinition(query)\n        return (definition.kind === 'OperationDefinition' && definition.operation === OperationTypeNode.QUERY) || false\n      },\n      split(\n        ({ query }) => {\n          const definition = getMainDefinition(query)\n          return (\n            (definition.kind === 'OperationDefinition' &&\n              (definition.name?.value.startsWith('Ph') || definition.name?.value.startsWith('PH_'))) ||\n            false\n          )\n        },\n        createHttpLink(process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT, { authToken, appId }),\n        createHttpLink(process.env.NEXT_PUBLIC_GRAPHQL_RH_ENDPOINT, { authToken, appId }),\n      ),\n      createHttpLink(process.env.NEXT_PUBLIC_GRAPHQL_PH_ENDPOINT, { authToken, appId }),\n    ),\n  )\n\nexport const createApolloClient = (options: ApolloClientOptions, callbacks?: ApolloCallbacks) => {\n  const apolloClient = new ApolloClient({\n    link: from([onErrorLink(callbacks), createSplitLink(options.appId, options.authToken)]),\n    cache: new InMemoryCache(),\n  })\n  return apolloClient\n}\n"],"names":["onErrorLink","callbacks","onError","graphQLErrors","networkError","message","locations","path","extensions","createHttpLink","endpoint","options","HttpLink","uuidv4","createSplitLink","appId","authToken","split","query","definition","getMainDefinition","GraphQLWsLink","createClient","OperationTypeNode","createApolloClient","ApolloClient","from","InMemoryCache"],"mappings":";;;;;;;AAkBA,MAAMA,IAAc,CAACC,MACnBC,EAAQ,CAAC,EAAE,eAAAC,GAAe,cAAAC,QAAmB;AACvC,EAAAD,KAAiB,OAAO,SAAW,QACrCA,EAAc,QAAQ,CAAC,EAAE,SAAAE,GAAS,WAAAC,GAAW,MAAAC,GAAM,YAAAC,QAAiB;AAC1D,YAAA,MAAM,6BAA6BH,CAAO,eAAeC,CAAS,WAAWC,CAAI,IAAIC,CAAU,GACnGA,KAAcA,EAAW,SAAS,kBACpCP,IAAY,aAAa,IAAI,GAC7B,WAAW,MAAM,OAAO,SAAS,OAAO,GAAG,GAAG,GAAI;AAAA,EACpD,CACD,GACGG,aAAsB,IAAI,oBAAoB,KAAK,UAAUA,CAAY,CAAC,EAAE;AAEpF,CAAC,GAEGK,IAAiB,CAACC,GAA8BC,MACpD,IAAIC,EAAS;AAAA,EACX,KAAKF;AAAA,EACL,SAASC,EAAQ,YACb;AAAA,IACE,eAAe,UAAUA,EAAQ,SAAS;AAAA,EAAA,IAE5C;AAAA,IACE,mBAAmBA,EAAQ;AAAA,IAC3B,mBAAmBA,EAAQ;AAAA,IAC3B,oBAAoBE,EAAO;AAAA,IAC3B,iBAAiB;AAAA,EAAA;AAEzB,CAAC,GAEGC,IAAkB,CAACC,GAAeC,MACtCC;AAAA,EACE,CAAC,EAAE,OAAAC,EAAA,MAAY;AACP,UAAAC,IAAaC,EAAkBF,CAAK;AAC1C,WAAOC,EAAW,SAAS,yBAAyBA,EAAW,cAAc;AAAA,EAC/E;AAAA,EACA,IAAIE;AAAA,IACFC,EAAa;AAAA,MACX,KAAK,OAAO,QAAQ,IAAI,+BAA+B;AAAA,MACvD,kBAAkB;AAAA,QAChB,SAASN,IACL;AAAA,UACE,eAAe,UAAUA,CAAS;AAAA,QAAA,IAEpC;AAAA,UACE,mBAAmBD;AAAA,UACnB,mBAAmBA;AAAA,UACnB,oBAAoBF,EAAO;AAAA,UAC3B,iBAAiB;AAAA,QAAA;AAAA,MACnB;AAAA,IAEP,CAAA;AAAA,EACH;AAAA,EACAI;AAAA,IACE,CAAC,EAAE,OAAAC,EAAA,MAAY;AACP,YAAAC,IAAaC,EAAkBF,CAAK;AAC1C,aAAQC,EAAW,SAAS,yBAAyBA,EAAW,cAAcI,EAAkB,SAAU;AAAA,IAC5G;AAAA,IACAN;AAAA,MACE,CAAC,EAAE,OAAAC,EAAA,MAAY;AACP,cAAAC,IAAaC,EAAkBF,CAAK;AAC1C,eACGC,EAAW,SAAS,0BAClBA,EAAW,MAAM,MAAM,WAAW,IAAI,KAAKA,EAAW,MAAM,MAAM,WAAW,KAAK,MACrF;AAAA,MAEJ;AAAA,MACAV,EAAe,QAAQ,IAAI,iCAAiC,EAAE,WAAAO,GAAW,OAAAD,GAAO;AAAA,MAChFN,EAAe,QAAQ,IAAI,iCAAiC,EAAE,WAAAO,GAAW,OAAAD,EAAO,CAAA;AAAA,IAClF;AAAA,IACAN,EAAe,QAAQ,IAAI,iCAAiC,EAAE,WAAAO,GAAW,OAAAD,EAAO,CAAA;AAAA,EAAA;AAEpF,GAEWS,IAAqB,CAACb,GAA8BV,MAC1C,IAAIwB,EAAa;AAAA,EACpC,MAAMC,EAAK,CAAC1B,EAAYC,CAAS,GAAGa,EAAgBH,EAAQ,OAAOA,EAAQ,SAAS,CAAC,CAAC;AAAA,EACtF,OAAO,IAAIgB,EAAc;AAAA,CAC1B;"}